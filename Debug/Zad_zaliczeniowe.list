
Zad_zaliczeniowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009278  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009628  08009628  0000b1f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009628  08009628  0000a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009630  08009630  0000b1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009630  08009630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009634  08009634  0000a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08009638  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000b8  080096f0  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000158  08009790  0000b158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b1c  200001f8  08009830  0000b1f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000d14  08009830  0000bd14  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c517  00000000  00000000  0000b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d25  00000000  00000000  0002773f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001698  00000000  00000000  0002b468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000118c  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029dd0  00000000  00000000  0002dc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dcb4  00000000  00000000  00057a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fd796  00000000  00000000  00075710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00172ea6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066ac  00000000  00000000  00172eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000098  00000000  00000000  00179598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009430 	.word	0x08009430

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08009430 	.word	0x08009430

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b96a 	b.w	8000f78 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14e      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	458c      	cmp	ip, r1
 8000ccc:	4686      	mov	lr, r0
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	d962      	bls.n	8000d9a <__udivmoddi4+0xde>
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f f68c 	uxth.w	r6, ip
 8000cf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb04 f106 	mul.w	r1, r4, r6
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d12:	f080 8112 	bcs.w	8000f3a <__udivmoddi4+0x27e>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 810f 	bls.w	8000f3a <__udivmoddi4+0x27e>
 8000d1c:	3c02      	subs	r4, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	fa1f f38e 	uxth.w	r3, lr
 8000d26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb00 f606 	mul.w	r6, r0, r6
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x94>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d42:	f080 80fc 	bcs.w	8000f3e <__udivmoddi4+0x282>
 8000d46:	429e      	cmp	r6, r3
 8000d48:	f240 80f9 	bls.w	8000f3e <__udivmoddi4+0x282>
 8000d4c:	4463      	add	r3, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0xa6>
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d905      	bls.n	8000d76 <__udivmoddi4+0xba>
 8000d6a:	b10d      	cbz	r5, 8000d70 <__udivmoddi4+0xb4>
 8000d6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4608      	mov	r0, r1
 8000d74:	e7f5      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d146      	bne.n	8000e0c <__udivmoddi4+0x150>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xcc>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f0c0 80f0 	bcc.w	8000f68 <__udivmoddi4+0x2ac>
 8000d88:	1a86      	subs	r6, r0, r2
 8000d8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0e6      	beq.n	8000d62 <__udivmoddi4+0xa6>
 8000d94:	e9c5 6300 	strd	r6, r3, [r5]
 8000d98:	e7e3      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x204>
 8000da0:	eba1 040c 	sub.w	r4, r1, ip
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dbe:	fb07 f006 	mul.w	r0, r7, r6
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x11c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x11a>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f200 80cd 	bhi.w	8000f70 <__udivmoddi4+0x2b4>
 8000dd6:	4626      	mov	r6, r4
 8000dd8:	1a1c      	subs	r4, r3, r0
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000de2:	fb08 4410 	mls	r4, r8, r0, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb00 f707 	mul.w	r7, r0, r7
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x148>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x146>
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	f200 80b0 	bhi.w	8000f62 <__udivmoddi4+0x2a6>
 8000e02:	4620      	mov	r0, r4
 8000e04:	1bdb      	subs	r3, r3, r7
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0x9c>
 8000e0c:	f1c1 0620 	rsb	r6, r1, #32
 8000e10:	408b      	lsls	r3, r1
 8000e12:	fa22 f706 	lsr.w	r7, r2, r6
 8000e16:	431f      	orrs	r7, r3
 8000e18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e20:	ea43 030c 	orr.w	r3, r3, ip
 8000e24:	40f4      	lsrs	r4, r6
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	0c38      	lsrs	r0, r7, #16
 8000e2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e30:	fbb4 fef0 	udiv	lr, r4, r0
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fb00 441e 	mls	r4, r0, lr, r4
 8000e3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e40:	fb0e f90c 	mul.w	r9, lr, ip
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	d90a      	bls.n	8000e62 <__udivmoddi4+0x1a6>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e52:	f080 8084 	bcs.w	8000f5e <__udivmoddi4+0x2a2>
 8000e56:	45a1      	cmp	r9, r4
 8000e58:	f240 8081 	bls.w	8000f5e <__udivmoddi4+0x2a2>
 8000e5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	eba4 0409 	sub.w	r4, r4, r9
 8000e66:	fa1f f983 	uxth.w	r9, r3
 8000e6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7a:	45a4      	cmp	ip, r4
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x1d2>
 8000e7e:	193c      	adds	r4, r7, r4
 8000e80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e84:	d267      	bcs.n	8000f56 <__udivmoddi4+0x29a>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d965      	bls.n	8000f56 <__udivmoddi4+0x29a>
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e92:	fba0 9302 	umull	r9, r3, r0, r2
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	d351      	bcc.n	8000f46 <__udivmoddi4+0x28a>
 8000ea2:	d04e      	beq.n	8000f42 <__udivmoddi4+0x286>
 8000ea4:	b155      	cbz	r5, 8000ebc <__udivmoddi4+0x200>
 8000ea6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000eae:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb2:	40cb      	lsrs	r3, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	40cc      	lsrs	r4, r1
 8000eb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	e750      	b.n	8000d62 <__udivmoddi4+0xa6>
 8000ec0:	f1c2 0320 	rsb	r3, r2, #32
 8000ec4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee8:	0c23      	lsrs	r3, r4, #16
 8000eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eee:	fb00 f107 	mul.w	r1, r0, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x24c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efe:	d22c      	bcs.n	8000f5a <__udivmoddi4+0x29e>
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d92a      	bls.n	8000f5a <__udivmoddi4+0x29e>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f10:	fb08 3311 	mls	r3, r8, r1, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb01 f307 	mul.w	r3, r1, r7
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x276>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f28:	d213      	bcs.n	8000f52 <__udivmoddi4+0x296>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d911      	bls.n	8000f52 <__udivmoddi4+0x296>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	1ae4      	subs	r4, r4, r3
 8000f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f38:	e739      	b.n	8000dae <__udivmoddi4+0xf2>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	e6f0      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e706      	b.n	8000d50 <__udivmoddi4+0x94>
 8000f42:	45c8      	cmp	r8, r9
 8000f44:	d2ae      	bcs.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4e:	3801      	subs	r0, #1
 8000f50:	e7a8      	b.n	8000ea4 <__udivmoddi4+0x1e8>
 8000f52:	4631      	mov	r1, r6
 8000f54:	e7ed      	b.n	8000f32 <__udivmoddi4+0x276>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e799      	b.n	8000e8e <__udivmoddi4+0x1d2>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e7d4      	b.n	8000f08 <__udivmoddi4+0x24c>
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1a6>
 8000f62:	4463      	add	r3, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e74d      	b.n	8000e04 <__udivmoddi4+0x148>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e70f      	b.n	8000d90 <__udivmoddi4+0xd4>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	e730      	b.n	8000dd8 <__udivmoddi4+0x11c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fa47 	bl	8001418 <null_ptr_check>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d117      	bne.n	8000fc6 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	20d0      	movs	r0, #208	@ 0xd0
 8000f9e:	f000 f818 	bl	8000fd2 <bmp2_get_regs>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10b      	bne.n	8000fc6 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b58      	cmp	r3, #88	@ 0x58
 8000fb4:	d105      	bne.n	8000fc2 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fa79 	bl	80014ae <get_calib_param>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e001      	b.n	8000fc6 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fc2:	23fc      	movs	r3, #252	@ 0xfc
 8000fc4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b087      	sub	sp, #28
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f000 fa18 	bl	8001418 <null_ptr_check>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11e      	bne.n	8001032 <bmp2_get_regs+0x60>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01b      	beq.n	8001032 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68dc      	ldr	r4, [r3, #12]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	7bf8      	ldrb	r0, [r7, #15]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 800102c:	23fe      	movs	r3, #254	@ 0xfe
 800102e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001030:	e001      	b.n	8001036 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001032:	23ff      	movs	r3, #255	@ 0xff
 8001034:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800103a:	4618      	mov	r0, r3
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}

08001042 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001042:	b590      	push	{r4, r7, lr}
 8001044:	b08b      	sub	sp, #44	@ 0x2c
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d901      	bls.n	800105a <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001056:	2304      	movs	r3, #4
 8001058:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f000 f9dc 	bl	8001418 <null_ptr_check>
 8001060:	4603      	mov	r3, r0
 8001062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001066:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800106a:	2b00      	cmp	r3, #0
 800106c:	d150      	bne.n	8001110 <bmp2_set_regs+0xce>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d04d      	beq.n	8001110 <bmp2_set_regs+0xce>
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d04a      	beq.n	8001110 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d043      	beq.n	8001108 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d114      	bne.n	80010b8 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800108e:	2300      	movs	r3, #0
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	e00d      	b.n	80010b0 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001094:	7ffb      	ldrb	r3, [r7, #31]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	440b      	add	r3, r1
 80010a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	3301      	adds	r3, #1
 80010ae:	77fb      	strb	r3, [r7, #31]
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8ed      	bhi.n	8001094 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d90b      	bls.n	80010d6 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010be:	f107 0114 	add.w	r1, r7, #20
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 f9c6 	bl	8001458 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3b01      	subs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	e001      	b.n	80010da <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691c      	ldr	r4, [r3, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	7818      	ldrb	r0, [r3, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f107 0114 	add.w	r1, r7, #20
 80010ea:	6a3a      	ldr	r2, [r7, #32]
 80010ec:	47a0      	blx	r4
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001100:	23fe      	movs	r3, #254	@ 0xfe
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001106:	e007      	b.n	8001118 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001108:	23fd      	movs	r3, #253	@ 0xfd
 800110a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800110e:	e003      	b.n	8001118 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001110:	23ff      	movs	r3, #255	@ 0xff
 8001112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001116:	e000      	b.n	800111a <bmp2_set_regs+0xd8>
        if (len > 0)
 8001118:	bf00      	nop
    }

    return rslt;
 800111a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800111e:	4618      	mov	r0, r3
 8001120:	372c      	adds	r7, #44	@ 0x2c
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}

08001126 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800112e:	23e0      	movs	r3, #224	@ 0xe0
 8001130:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001132:	23b6      	movs	r3, #182	@ 0xb6
 8001134:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001136:	f107 010d 	add.w	r1, r7, #13
 800113a:	f107 000e 	add.w	r0, r7, #14
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f7ff ff7e 	bl	8001042 <bmp2_set_regs>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001160:	2300      	movs	r3, #0
 8001162:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d02d      	beq.n	80011c6 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800116a:	f107 010c 	add.w	r1, r7, #12
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2202      	movs	r2, #2
 8001172:	20f4      	movs	r0, #244	@ 0xf4
 8001174:	f7ff ff2d 	bl	8000fd2 <bmp2_get_regs>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d122      	bne.n	80011ca <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	109b      	asrs	r3, r3, #2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	b2da      	uxtb	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800119e:	7b7b      	ldrb	r3, [r7, #13]
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	109b      	asrs	r3, r3, #2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	715a      	strb	r2, [r3, #5]
 80011c4:	e001      	b.n	80011ca <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011c6:	23ff      	movs	r3, #255	@ 0xff
 80011c8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 f9fd 	bl	80015e4 <conf_sensor>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01b      	beq.n	800123c <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001204:	f107 010e 	add.w	r1, r7, #14
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	20f3      	movs	r0, #243	@ 0xf3
 800120e:	f7ff fee0 	bl	8000fd2 <bmp2_get_regs>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d110      	bne.n	8001240 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	10db      	asrs	r3, r3, #3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	705a      	strb	r2, [r3, #1]
 800123a:	e001      	b.n	8001240 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800123c:	23ff      	movs	r3, #255	@ 0xff
 800123e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f9bf 	bl	80015e4 <conf_sensor>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	2300      	movs	r3, #0
 8001286:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d024      	beq.n	80012e2 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001298:	f107 0110 	add.w	r1, r7, #16
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2206      	movs	r2, #6
 80012a0:	20f7      	movs	r0, #247	@ 0xf7
 80012a2:	f7ff fe96 	bl	8000fd2 <bmp2_get_regs>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d119      	bne.n	80012e6 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fab9 	bl	8001834 <parse_sensor_data>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10b      	bne.n	80012e6 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f80b 	bl	80012f2 <bmp2_compensate_data>
 80012dc:	4603      	mov	r3, r0
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e001      	b.n	80012e6 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012e2:	23ff      	movs	r3, #255	@ 0xff
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f88a 	bl	8001418 <null_ptr_check>
 8001304:	4603      	mov	r3, r0
 8001306:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001308:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d129      	bne.n	8001364 <bmp2_compensate_data+0x72>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d026      	beq.n	8001364 <bmp2_compensate_data+0x72>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d023      	beq.n	8001364 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3308      	adds	r3, #8
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68f9      	ldr	r1, [r7, #12]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fabb 	bl	80018bc <compensate_temperature>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10a      	bne.n	8001368 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fba5 	bl	8001aa8 <compensate_pressure>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001362:	e001      	b.n	8001368 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001364:	23ff      	movs	r3, #255	@ 0xff
 8001366:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b092      	sub	sp, #72	@ 0x48
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <bmp2_compute_meas_time+0x9c>)
 8001382:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001386:	461d      	mov	r5, r3
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001390:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <bmp2_compute_meas_time+0xa0>)
 8001392:	f107 0410 	add.w	r4, r7, #16
 8001396:	461d      	mov	r5, r3
 8001398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f837 	bl	8001418 <null_ptr_check>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d122      	bne.n	80013fe <bmp2_compute_meas_time+0x8a>
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01f      	beq.n	80013fe <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e1b      	ldrb	r3, [r3, #24]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d111      	bne.n	80013ea <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	3348      	adds	r3, #72	@ 0x48
 80013ce:	443b      	add	r3, r7
 80013d0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	3348      	adds	r3, #72	@ 0x48
 80013dc:	443b      	add	r3, r7
 80013de:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013e2:	441a      	add	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013e8:	e00c      	b.n	8001404 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	78db      	ldrb	r3, [r3, #3]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	3348      	adds	r3, #72	@ 0x48
 80013f2:	443b      	add	r3, r7
 80013f4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013fc:	e002      	b.n	8001404 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013fe:	23ff      	movs	r3, #255	@ 0xff
 8001400:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8001404:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001408:	4618      	mov	r0, r3
 800140a:	3748      	adds	r7, #72	@ 0x48
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	08009448 	.word	0x08009448
 8001414:	0800945c 	.word	0x0800945c

08001418 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <null_ptr_check+0x26>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <null_ptr_check+0x26>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <null_ptr_check+0x26>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800143e:	23ff      	movs	r3, #255	@ 0xff
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e001      	b.n	8001448 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e015      	b.n	8001498 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	441a      	add	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	440b      	add	r3, r1
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	440b      	add	r3, r1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3e5      	bcc.n	800146c <interleave_data+0x14>
    }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b08a      	sub	sp, #40	@ 0x28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014cc:	f107 010c 	add.w	r1, r7, #12
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2219      	movs	r2, #25
 80014d4:	2088      	movs	r0, #136	@ 0x88
 80014d6:	f7ff fd7c 	bl	8000fd2 <bmp2_get_regs>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d177      	bne.n	80015d8 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014e8:	7b7b      	ldrb	r3, [r7, #13]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800150e:	7c7b      	ldrb	r3, [r7, #17]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	7c3b      	ldrb	r3, [r7, #16]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7cbb      	ldrb	r3, [r7, #18]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	7d3b      	ldrb	r3, [r7, #20]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21a      	sxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	7dbb      	ldrb	r3, [r7, #22]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21a      	sxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001558:	7e7b      	ldrb	r3, [r7, #25]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	7e3b      	ldrb	r3, [r7, #24]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21a      	sxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800156a:	7efb      	ldrb	r3, [r7, #27]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7ebb      	ldrb	r3, [r7, #26]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800157c:	7f7b      	ldrb	r3, [r7, #29]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7f3b      	ldrb	r3, [r7, #28]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21a      	sxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015a0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80015d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015f2:	2300      	movs	r3, #0
 80015f4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015f6:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80015fa:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d074      	beq.n	80016ec <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001602:	f107 0114 	add.w	r1, r7, #20
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	20f4      	movs	r0, #244	@ 0xf4
 800160c:	f7ff fce1 	bl	8000fd2 <bmp2_get_regs>
 8001610:	4603      	mov	r3, r0
 8001612:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d169      	bne.n	80016f0 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fd82 	bl	8001126 <bmp2_soft_reset>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001626:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d160      	bne.n	80016f0 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f861 	bl	80016fc <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 800163a:	7d7b      	ldrb	r3, [r7, #21]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	b25a      	sxtb	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	789b      	ldrb	r3, [r3, #2]
 8001648:	015b      	lsls	r3, r3, #5
 800164a:	b25b      	sxtb	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b25b      	sxtb	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001654:	7d7b      	ldrb	r3, [r7, #21]
 8001656:	b25b      	sxtb	r3, r3
 8001658:	f023 031c 	bic.w	r3, r3, #28
 800165c:	b25a      	sxtb	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	b25b      	sxtb	r3, r3
 8001666:	f003 031c 	and.w	r3, r3, #28
 800166a:	b25b      	sxtb	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b25b      	sxtb	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001674:	7d7b      	ldrb	r3, [r7, #21]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	b25a      	sxtb	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	795b      	ldrb	r3, [r3, #5]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b25b      	sxtb	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b25b      	sxtb	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001692:	f107 0114 	add.w	r1, r7, #20
 8001696:	f107 0010 	add.w	r0, r7, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f7ff fcd0 	bl	8001042 <bmp2_set_regs>
 80016a2:	4603      	mov	r3, r0
 80016a4:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d120      	bne.n	80016f0 <conf_sensor+0x10c>
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01d      	beq.n	80016f0 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016ba:	7d3b      	ldrb	r3, [r7, #20]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016d6:	f107 0114 	add.w	r1, r7, #20
 80016da:	f107 0010 	add.w	r0, r7, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f7ff fcae 	bl	8001042 <bmp2_set_regs>
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]
 80016ea:	e001      	b.n	80016f0 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016ec:	23ff      	movs	r3, #255	@ 0xff
 80016ee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	78db      	ldrb	r3, [r3, #3]
 800170a:	2b04      	cmp	r3, #4
 800170c:	f200 808b 	bhi.w	8001826 <set_os_mode+0x12a>
 8001710:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <set_os_mode+0x1c>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	0800172d 	.word	0x0800172d
 800171c:	0800175f 	.word	0x0800175f
 8001720:	08001791 	.word	0x08001791
 8001724:	080017c3 	.word	0x080017c3
 8001728:	080017f5 	.word	0x080017f5
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	b25b      	sxtb	r3, r3
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	f023 031c 	bic.w	r3, r3, #28
 800174e:	b25b      	sxtb	r3, r3
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	b25b      	sxtb	r3, r3
 8001756:	b2da      	uxtb	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	701a      	strb	r2, [r3, #0]
            break;
 800175c:	e064      	b.n	8001828 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	b25b      	sxtb	r3, r3
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	b25b      	sxtb	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	f023 031c 	bic.w	r3, r3, #28
 8001780:	b25b      	sxtb	r3, r3
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	b25b      	sxtb	r3, r3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	701a      	strb	r2, [r3, #0]
            break;
 800178e:	e04b      	b.n	8001828 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b25b      	sxtb	r3, r3
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	b25b      	sxtb	r3, r3
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	f023 031c 	bic.w	r3, r3, #28
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	f043 030c 	orr.w	r3, r3, #12
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	701a      	strb	r2, [r3, #0]
            break;
 80017c0:	e032      	b.n	8001828 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	f023 031c 	bic.w	r3, r3, #28
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	701a      	strb	r2, [r3, #0]
            break;
 80017f2:	e019      	b.n	8001828 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001804:	b25b      	sxtb	r3, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b25b      	sxtb	r3, r3
 8001812:	f023 031c 	bic.w	r3, r3, #28
 8001816:	b25b      	sxtb	r3, r3
 8001818:	f043 0314 	orr.w	r3, r3, #20
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2da      	uxtb	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	701a      	strb	r2, [r3, #0]
            break;
 8001824:	e000      	b.n	8001828 <set_os_mode+0x12c>
        default:
            break;
 8001826:	bf00      	nop
    }
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	031b      	lsls	r3, r3, #12
 8001844:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3302      	adds	r3, #2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	b2db      	uxtb	r3, r3
 800185a:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	431a      	orrs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	431a      	orrs	r2, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3303      	adds	r3, #3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	031b      	lsls	r3, r3, #12
 8001872:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3304      	adds	r3, #4
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3305      	adds	r3, #5
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	b2db      	uxtb	r3, r3
 8001888:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	461a      	mov	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f000 fae3 	bl	8001e70 <st_check_boundaries>
 80018aa:	4603      	mov	r3, r0
 80018ac:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c0:	b08c      	sub	sp, #48	@ 0x30
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe3d 	bl	8000554 <__aeabi_i2d>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b6c      	ldr	r3, [pc, #432]	@ (8001a90 <compensate_temperature+0x1d4>)
 80018e0:	f7fe ffcc 	bl	800087c <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8b9b      	ldrh	r3, [r3, #28]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe1f 	bl	8000534 <__aeabi_ui2d>
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <compensate_temperature+0x1d8>)
 80018fc:	f7fe ffbe 	bl	800087c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fcd6 	bl	80002b8 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe1a 	bl	8000554 <__aeabi_i2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fe7e 	bl	8000628 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe0b 	bl	8000554 <__aeabi_i2d>
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001946:	f7fe ff99 	bl	800087c <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4614      	mov	r4, r2
 8001950:	461d      	mov	r5, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8b9b      	ldrh	r3, [r3, #28]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fdec 	bl	8000534 <__aeabi_ui2d>
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b4d      	ldr	r3, [pc, #308]	@ (8001a98 <compensate_temperature+0x1dc>)
 8001962:	f7fe ff8b 	bl	800087c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe fca3 	bl	80002b8 <__aeabi_dsub>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4614      	mov	r4, r2
 8001978:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fde8 	bl	8000554 <__aeabi_i2d>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800198c:	f7fe ff76 	bl	800087c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4690      	mov	r8, r2
 8001996:	4699      	mov	r9, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8b9b      	ldrh	r3, [r3, #28]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdc9 	bl	8000534 <__aeabi_ui2d>
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <compensate_temperature+0x1dc>)
 80019a8:	f7fe ff68 	bl	800087c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4640      	mov	r0, r8
 80019b2:	4649      	mov	r1, r9
 80019b4:	f7fe fc80 	bl	80002b8 <__aeabi_dsub>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fe32 	bl	8000628 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdbe 	bl	8000554 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
    var2 =
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fe22 	bl	8000628 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019f4:	f7fe fc62 	bl	80002bc <__adddf3>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8ac 	bl	8000b5c <__aeabi_d2iz>
 8001a04:	4602      	mov	r2, r0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a12:	f7fe fc53 	bl	80002bc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <compensate_temperature+0x1e0>)
 8001a24:	f7fe ff2a 	bl	800087c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <compensate_temperature+0x1e4>)
 8001a36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a3a:	f7ff f867 	bl	8000b0c <__aeabi_dcmplt>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <compensate_temperature+0x1e4>)
 8001a4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <compensate_temperature+0x1e8>)
 8001a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a5e:	f7ff f873 	bl	8000b48 <__aeabi_dcmpgt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <compensate_temperature+0x1e8>)
 8001a6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a7e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a82:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3730      	adds	r7, #48	@ 0x30
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a90:	40d00000 	.word	0x40d00000
 8001a94:	40900000 	.word	0x40900000
 8001a98:	40c00000 	.word	0x40c00000
 8001a9c:	40b40000 	.word	0x40b40000
 8001aa0:	c0440000 	.word	0xc0440000
 8001aa4:	40554000 	.word	0x40554000

08001aa8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd42 	bl	8000554 <__aeabi_i2d>
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ad8:	f7fe fed0 	bl	800087c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4bcb      	ldr	r3, [pc, #812]	@ (8001e18 <compensate_pressure+0x370>)
 8001aea:	f7fe fbe5 	bl	80002b8 <__aeabi_dsub>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001afe:	f7fe fd93 	bl	8000628 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4614      	mov	r4, r2
 8001b08:	461d      	mov	r5, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fd1f 	bl	8000554 <__aeabi_i2d>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fd83 	bl	8000628 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e1c <compensate_pressure+0x374>)
 8001b30:	f7fe fea4 	bl	800087c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd06 	bl	8000554 <__aeabi_i2d>
 8001b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4c:	f7fe fd6c 	bl	8000628 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	f7fe fbae 	bl	80002bc <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b68:	f7fe fba8 	bl	80002bc <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4ba9      	ldr	r3, [pc, #676]	@ (8001e20 <compensate_pressure+0x378>)
 8001b7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b7e:	f7fe fe7d 	bl	800087c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcdf 	bl	8000554 <__aeabi_i2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4ba2      	ldr	r3, [pc, #648]	@ (8001e24 <compensate_pressure+0x37c>)
 8001b9c:	f7fe fd44 	bl	8000628 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fb88 	bl	80002bc <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcca 	bl	8000554 <__aeabi_i2d>
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fd30 	bl	8000628 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fd28 	bl	8000628 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b90      	ldr	r3, [pc, #576]	@ (8001e28 <compensate_pressure+0x380>)
 8001be6:	f7fe fe49 	bl	800087c <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcab 	bl	8000554 <__aeabi_i2d>
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	f7fe fd11 	bl	8000628 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fb55 	bl	80002bc <__adddf3>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b82      	ldr	r3, [pc, #520]	@ (8001e28 <compensate_pressure+0x380>)
 8001c20:	f7fe fe2c 	bl	800087c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b7a      	ldr	r3, [pc, #488]	@ (8001e1c <compensate_pressure+0x374>)
 8001c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c36:	f7fe fe21 	bl	800087c <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b79      	ldr	r3, [pc, #484]	@ (8001e2c <compensate_pressure+0x384>)
 8001c48:	f7fe fb38 	bl	80002bc <__adddf3>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc6b 	bl	8000534 <__aeabi_ui2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f7fe fcdf 	bl	8000628 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c7e:	f7fe ff45 	bl	8000b0c <__aeabi_dcmplt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <compensate_pressure+0x1f8>
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c94:	f7fe ff58 	bl	8000b48 <__aeabi_dcmpgt>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80de 	beq.w	8001e5c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc45 	bl	8000534 <__aeabi_ui2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	f04f 0000 	mov.w	r0, #0
 8001cb2:	495f      	ldr	r1, [pc, #380]	@ (8001e30 <compensate_pressure+0x388>)
 8001cb4:	f7fe fb00 	bl	80002b8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e34 <compensate_pressure+0x38c>)
 8001cc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cca:	f7fe fdd7 	bl	800087c <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cd6:	f7fe faef 	bl	80002b8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	a347      	add	r3, pc, #284	@ (adr r3, 8001e00 <compensate_pressure+0x358>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fc9e 	bl	8000628 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf8:	f7fe fdc0 	bl	800087c <__aeabi_ddiv>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc22 	bl	8000554 <__aeabi_i2d>
 8001d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d14:	f7fe fc88 	bl	8000628 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d24:	f7fe fc80 	bl	8000628 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <compensate_pressure+0x390>)
 8001d36:	f7fe fda1 	bl	800087c <__aeabi_ddiv>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc03 	bl	8000554 <__aeabi_i2d>
 8001d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d52:	f7fe fc69 	bl	8000628 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <compensate_pressure+0x374>)
 8001d64:	f7fe fd8a 	bl	800087c <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d78:	f7fe faa0 	bl	80002bc <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbe2 	bl	8000554 <__aeabi_i2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fa90 	bl	80002bc <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <compensate_pressure+0x394>)
 8001daa:	f7fe fd67 	bl	800087c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001db6:	f7fe fa81 	bl	80002bc <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001dc2:	a311      	add	r3, pc, #68	@ (adr r3, 8001e08 <compensate_pressure+0x360>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dcc:	f7fe fe9e 	bl	8000b0c <__aeabi_dcmplt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001dd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e08 <compensate_pressure+0x360>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001de6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e10 <compensate_pressure+0x368>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001df0:	f7fe feaa 	bl	8000b48 <__aeabi_dcmpgt>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	e022      	b.n	8001e40 <compensate_pressure+0x398>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40b86a00 	.word	0x40b86a00
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40dd4c00 	.word	0x40dd4c00
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40fadb00 	.word	0x40fadb00
 8001e18:	40ef4000 	.word	0x40ef4000
 8001e1c:	40e00000 	.word	0x40e00000
 8001e20:	40100000 	.word	0x40100000
 8001e24:	40f00000 	.word	0x40f00000
 8001e28:	41200000 	.word	0x41200000
 8001e2c:	3ff00000 	.word	0x3ff00000
 8001e30:	41300000 	.word	0x41300000
 8001e34:	40b00000 	.word	0x40b00000
 8001e38:	41e00000 	.word	0x41e00000
 8001e3c:	40300000 	.word	0x40300000
 8001e40:	d007      	beq.n	8001e52 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e42:	a309      	add	r3, pc, #36	@ (adr r3, 8001e68 <compensate_pressure+0x3c0>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3730      	adds	r7, #48	@ 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40fadb00 	.word	0x40fadb00

08001e70 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db03      	blt.n	8001e8c <st_check_boundaries+0x1c>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <st_check_boundaries+0x88>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	dd09      	ble.n	8001ea0 <st_check_boundaries+0x30>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db06      	blt.n	8001ea0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <st_check_boundaries+0x88>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	dc02      	bgt.n	8001ea0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e9a:	23fa      	movs	r3, #250	@ 0xfa
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e023      	b.n	8001ee8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db03      	blt.n	8001eae <st_check_boundaries+0x3e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <st_check_boundaries+0x88>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	dd09      	ble.n	8001ec2 <st_check_boundaries+0x52>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db06      	blt.n	8001ec2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <st_check_boundaries+0x88>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	dc02      	bgt.n	8001ec2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001ebc:	23fb      	movs	r3, #251	@ 0xfb
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e012      	b.n	8001ee8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db03      	blt.n	8001ed0 <st_check_boundaries+0x60>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <st_check_boundaries+0x88>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	dd09      	ble.n	8001ee4 <st_check_boundaries+0x74>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db03      	blt.n	8001ede <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <st_check_boundaries+0x88>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	dd02      	ble.n	8001ee4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001ede:	23f9      	movs	r3, #249	@ 0xf9
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e001      	b.n	8001ee8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	000ffff0 	.word	0x000ffff0

08001efc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff f839 	bl	8000f7c <bmp2_init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f91e 	bl	8001156 <bmp2_get_config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f22:	2300      	movs	r3, #0
 8001f24:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f26:	2303      	movs	r3, #3
 8001f28:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f950 	bl	80011d6 <bmp2_set_config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4619      	mov	r1, r3
 8001f42:	2003      	movs	r0, #3
 8001f44:	f7ff f982 	bl	800124c <bmp2_set_power_mode>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f4c:	f107 0108 	add.w	r1, r7, #8
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fa0c 	bl	8001374 <bmp2_compute_meas_time>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6858      	ldr	r0, [r3, #4]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	891b      	ldrh	r3, [r3, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	4619      	mov	r1, r3
 8001f94:	f002 f8de 	bl	8004154 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f107 010f 	add.w	r1, r7, #15
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f003 fbb7 	bl	8005716 <HAL_SPI_Transmit>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	f003 fd22 	bl	8005a00 <HAL_SPI_Receive>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	7dbb      	ldrb	r3, [r7, #22]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6858      	ldr	r0, [r3, #4]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	891b      	ldrh	r3, [r3, #8]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f002 f8bf 	bl	8004154 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fdc:	23ff      	movs	r3, #255	@ 0xff
 8001fde:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002000:	2300      	movs	r3, #0
 8002002:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6858      	ldr	r0, [r3, #4]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	891b      	ldrh	r3, [r3, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	4619      	mov	r1, r3
 8002014:	f002 f89e 	bl	8004154 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	f107 010f 	add.w	r1, r7, #15
 8002020:	2305      	movs	r3, #5
 8002022:	2201      	movs	r2, #1
 8002024:	f003 fb77 	bl	8005716 <HAL_SPI_Transmit>
 8002028:	4603      	mov	r3, r0
 800202a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2305      	movs	r3, #5
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	f003 fb6d 	bl	8005716 <HAL_SPI_Transmit>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	7dbb      	ldrb	r3, [r7, #22]
 8002042:	4413      	add	r3, r2
 8002044:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6858      	ldr	r0, [r3, #4]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	891b      	ldrh	r3, [r3, #8]
 800204e:	2201      	movs	r2, #1
 8002050:	4619      	mov	r1, r3
 8002052:	f002 f87f 	bl	8004154 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002056:	7dbb      	ldrb	r3, [r7, #22]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <bmp2_spi_write+0x74>
    iError = -1;
 800205c:	23ff      	movs	r3, #255	@ 0xff
 800205e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002060:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <bmp2_delay_us+0x24>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f8c1 	bl	8003208 <HAL_Delay>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b08b      	sub	sp, #44	@ 0x2c
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020a0:	23ff      	movs	r3, #255	@ 0xff
 80020a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	899b      	ldrh	r3, [r3, #12]
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f89c 	bl	80011f4 <bmp2_get_status>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f8d4 	bl	8001276 <bmp2_get_sensor_data>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80020d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <BMP2_ReadData+0xc4>)
 80020e8:	f7fe fbc8 	bl	800087c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80020f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002104:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <BMP2_ReadData+0x80>
 800210c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002110:	2b00      	cmp	r3, #0
 8002112:	dccd      	bgt.n	80020b0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	684c      	ldr	r4, [r1, #4]
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fd63 	bl	8000bec <__aeabi_d2f>
 8002126:	4603      	mov	r3, r0
 8002128:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	684c      	ldr	r4, [r1, #4]
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd58 	bl	8000bec <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002148:	729a      	strb	r2, [r3, #10]

  return rslt;
 800214a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800214e:	4618      	mov	r0, r3
 8002150:	372c      	adds	r7, #44	@ 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	40590000 	.word	0x40590000

0800215c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002160:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <MX_ETH_Init+0x84>)
 8002162:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <MX_ETH_Init+0x88>)
 8002164:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <MX_ETH_Init+0x8c>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800216c:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <MX_ETH_Init+0x8c>)
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002172:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <MX_ETH_Init+0x8c>)
 8002174:	22e1      	movs	r2, #225	@ 0xe1
 8002176:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <MX_ETH_Init+0x8c>)
 800217a:	2200      	movs	r2, #0
 800217c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_ETH_Init+0x8c>)
 8002180:	2200      	movs	r2, #0
 8002182:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002184:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <MX_ETH_Init+0x8c>)
 8002186:	2200      	movs	r2, #0
 8002188:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <MX_ETH_Init+0x84>)
 800218c:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <MX_ETH_Init+0x8c>)
 800218e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <MX_ETH_Init+0x84>)
 8002192:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002196:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <MX_ETH_Init+0x84>)
 800219a:	4a14      	ldr	r2, [pc, #80]	@ (80021ec <MX_ETH_Init+0x90>)
 800219c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <MX_ETH_Init+0x84>)
 80021a0:	4a13      	ldr	r2, [pc, #76]	@ (80021f0 <MX_ETH_Init+0x94>)
 80021a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_ETH_Init+0x84>)
 80021a6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80021aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80021ac:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <MX_ETH_Init+0x84>)
 80021ae:	f001 f9f3 	bl	8003598 <HAL_ETH_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80021b8:	f000 fc9a 	bl	8002af0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80021bc:	2238      	movs	r2, #56	@ 0x38
 80021be:	2100      	movs	r1, #0
 80021c0:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <MX_ETH_Init+0x98>)
 80021c2:	f006 fcb5 	bl	8008b30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MX_ETH_Init+0x98>)
 80021c8:	2221      	movs	r2, #33	@ 0x21
 80021ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <MX_ETH_Init+0x98>)
 80021ce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80021d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <MX_ETH_Init+0x98>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000024c 	.word	0x2000024c
 80021e4:	40028000 	.word	0x40028000
 80021e8:	200002fc 	.word	0x200002fc
 80021ec:	20000158 	.word	0x20000158
 80021f0:	200000b8 	.word	0x200000b8
 80021f4:	20000214 	.word	0x20000214

080021f8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_ETH_MspInit+0x168>)
 8002216:	4293      	cmp	r3, r2
 8002218:	f040 809e 	bne.w	8002358 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800221c:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	4a50      	ldr	r2, [pc, #320]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002222:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002226:	6313      	str	r3, [r2, #48]	@ 0x30
 8002228:	4b4e      	ldr	r3, [pc, #312]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	4b4b      	ldr	r3, [pc, #300]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	4a4a      	ldr	r2, [pc, #296]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800223a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800223e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002240:	4b48      	ldr	r3, [pc, #288]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4b45      	ldr	r3, [pc, #276]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	4a44      	ldr	r2, [pc, #272]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002252:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002256:	6313      	str	r3, [r2, #48]	@ 0x30
 8002258:	4b42      	ldr	r3, [pc, #264]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002264:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4a3e      	ldr	r2, [pc, #248]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002270:	4b3c      	ldr	r3, [pc, #240]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b39      	ldr	r3, [pc, #228]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	4a38      	ldr	r2, [pc, #224]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6313      	str	r3, [r2, #48]	@ 0x30
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4a32      	ldr	r2, [pc, #200]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a0:	4b30      	ldr	r3, [pc, #192]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 80022b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002364 <HAL_ETH_MspInit+0x16c>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022c4:	2332      	movs	r3, #50	@ 0x32
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022d4:	230b      	movs	r3, #11
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022dc:	4619      	mov	r1, r3
 80022de:	4822      	ldr	r0, [pc, #136]	@ (8002368 <HAL_ETH_MspInit+0x170>)
 80022e0:	f001 fd8c 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022e4:	2386      	movs	r3, #134	@ 0x86
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022f4:	230b      	movs	r3, #11
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022fc:	4619      	mov	r1, r3
 80022fe:	481b      	ldr	r0, [pc, #108]	@ (800236c <HAL_ETH_MspInit+0x174>)
 8002300:	f001 fd7c 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002316:	230b      	movs	r3, #11
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	4813      	ldr	r0, [pc, #76]	@ (8002370 <HAL_ETH_MspInit+0x178>)
 8002322:	f001 fd6b 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002326:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002338:	230b      	movs	r3, #11
 800233a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800233c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002340:	4619      	mov	r1, r3
 8002342:	480c      	ldr	r0, [pc, #48]	@ (8002374 <HAL_ETH_MspInit+0x17c>)
 8002344:	f001 fd5a 	bl	8003dfc <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	203d      	movs	r0, #61	@ 0x3d
 800234e:	f001 f85a 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002352:	203d      	movs	r0, #61	@ 0x3d
 8002354:	f001 f873 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002358:	bf00      	nop
 800235a:	3738      	adds	r7, #56	@ 0x38
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40028000 	.word	0x40028000
 8002364:	40023800 	.word	0x40023800
 8002368:	40020800 	.word	0x40020800
 800236c:	40020000 	.word	0x40020000
 8002370:	40020400 	.word	0x40020400
 8002374:	40021800 	.word	0x40021800

08002378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800238e:	4b71      	ldr	r3, [pc, #452]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a70      	ldr	r2, [pc, #448]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b6e      	ldr	r3, [pc, #440]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b68      	ldr	r3, [pc, #416]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a64      	ldr	r2, [pc, #400]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ca:	4b62      	ldr	r3, [pc, #392]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a5e      	ldr	r2, [pc, #376]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4b59      	ldr	r3, [pc, #356]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b56      	ldr	r3, [pc, #344]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002406:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 800240c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b50      	ldr	r3, [pc, #320]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	4b4d      	ldr	r3, [pc, #308]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a4c      	ldr	r2, [pc, #304]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b4a      	ldr	r3, [pc, #296]	@ (8002554 <MX_GPIO_Init+0x1dc>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_SET);
 8002436:	2201      	movs	r2, #1
 8002438:	2110      	movs	r1, #16
 800243a:	4847      	ldr	r0, [pc, #284]	@ (8002558 <MX_GPIO_Init+0x1e0>)
 800243c:	f001 fe8a 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002446:	4845      	ldr	r0, [pc, #276]	@ (800255c <MX_GPIO_Init+0x1e4>)
 8002448:	f001 fe84 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(przek_wiatrak_GPIO_Port, przek_wiatrak_Pin, GPIO_PIN_SET);
 800244c:	2201      	movs	r2, #1
 800244e:	2101      	movs	r1, #1
 8002450:	4843      	ldr	r0, [pc, #268]	@ (8002560 <MX_GPIO_Init+0x1e8>)
 8002452:	f001 fe7f 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2140      	movs	r1, #64	@ 0x40
 800245a:	4841      	ldr	r0, [pc, #260]	@ (8002560 <MX_GPIO_Init+0x1e8>)
 800245c:	f001 fe7a 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(przek_grzalka_GPIO_Port, przek_grzalka_Pin, GPIO_PIN_SET);
 8002460:	2201      	movs	r2, #1
 8002462:	2102      	movs	r1, #2
 8002464:	483f      	ldr	r0, [pc, #252]	@ (8002564 <MX_GPIO_Init+0x1ec>)
 8002466:	f001 fe75 	bl	8004154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 800246a:	2310      	movs	r3, #16
 800246c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002476:	2302      	movs	r3, #2
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4835      	ldr	r0, [pc, #212]	@ (8002558 <MX_GPIO_Init+0x1e0>)
 8002482:	f001 fcbb 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4832      	ldr	r0, [pc, #200]	@ (8002568 <MX_GPIO_Init+0x1f0>)
 800249e:	f001 fcad 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80024a2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	4828      	ldr	r0, [pc, #160]	@ (800255c <MX_GPIO_Init+0x1e4>)
 80024bc:	f001 fc9e 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Btn_down_Pin|Btn_up_Pin;
 80024c0:	2312      	movs	r3, #18
 80024c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ca:	2302      	movs	r3, #2
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4821      	ldr	r0, [pc, #132]	@ (800255c <MX_GPIO_Init+0x1e4>)
 80024d6:	f001 fc91 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = przek_wiatrak_Pin|USB_PowerSwitchOn_Pin;
 80024da:	2341      	movs	r3, #65	@ 0x41
 80024dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024de:	2301      	movs	r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	481b      	ldr	r0, [pc, #108]	@ (8002560 <MX_GPIO_Init+0x1e8>)
 80024f2:	f001 fc83 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4815      	ldr	r0, [pc, #84]	@ (8002560 <MX_GPIO_Init+0x1e8>)
 800250a:	f001 fc77 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = przek_grzalka_Pin;
 800250e:	2302      	movs	r3, #2
 8002510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(przek_grzalka_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	4619      	mov	r1, r3
 8002524:	480f      	ldr	r0, [pc, #60]	@ (8002564 <MX_GPIO_Init+0x1ec>)
 8002526:	f001 fc69 	bl	8003dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2007      	movs	r0, #7
 8002530:	f000 ff69 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002534:	2007      	movs	r0, #7
 8002536:	f000 ff82 	bl	800343e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200a      	movs	r0, #10
 8002540:	f000 ff61 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002544:	200a      	movs	r0, #10
 8002546:	f000 ff7a 	bl	800343e <HAL_NVIC_EnableIRQ>

}
 800254a:	bf00      	nop
 800254c:	3730      	adds	r7, #48	@ 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40021000 	.word	0x40021000
 800255c:	40020400 	.word	0x40020400
 8002560:	40021800 	.word	0x40021800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40020800 	.word	0x40020800

0800256c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart3, rx_buffer, rx_msg_len);
 8002574:	4b23      	ldr	r3, [pc, #140]	@ (8002604 <HAL_UART_RxCpltCallback+0x98>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	4922      	ldr	r1, [pc, #136]	@ (8002608 <HAL_UART_RxCpltCallback+0x9c>)
 800257e:	4823      	ldr	r0, [pc, #140]	@ (800260c <HAL_UART_RxCpltCallback+0xa0>)
 8002580:	f004 fd2f 	bl	8006fe2 <HAL_UART_Receive_IT>
	if(sizeof(strtol((char*)&rx_buffer[0], 0, 10)) == 4)//jesli to int
		wartosc_odebrana = strtol((char*)&rx_buffer[0], 0, 10);
 8002584:	220a      	movs	r2, #10
 8002586:	2100      	movs	r1, #0
 8002588:	481f      	ldr	r0, [pc, #124]	@ (8002608 <HAL_UART_RxCpltCallback+0x9c>)
 800258a:	f006 faa7 	bl	8008adc <strtol>
 800258e:	4603      	mov	r3, r0
 8002590:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_UART_RxCpltCallback+0xa4>)
 8002592:	6013      	str	r3, [r2, #0]

	prosba_temp = prosba_temp * 10 + wartosc_odebrana;
 8002594:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <HAL_UART_RxCpltCallback+0xa8>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4413      	add	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_UART_RxCpltCallback+0xa4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_UART_RxCpltCallback+0xa8>)
 80025ae:	801a      	strh	r2, [r3, #0]

	if (huart->Instance == USART3) {  // Jeśli UART odebrał znak
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_UART_RxCpltCallback+0xac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d105      	bne.n	80025c6 <HAL_UART_RxCpltCallback+0x5a>
		odebrane_znaki++;
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_UART_RxCpltCallback+0xb0>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_UART_RxCpltCallback+0xb0>)
 80025c4:	801a      	strh	r2, [r3, #0]
	}

	if(odebrane_znaki == 2){
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_UART_RxCpltCallback+0xb0>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d116      	bne.n	80025fc <HAL_UART_RxCpltCallback+0x90>
		odebrane_znaki = 0;
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <HAL_UART_RxCpltCallback+0xb0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	801a      	strh	r2, [r3, #0]
		if(prosba_temp >= war_min && prosba_temp <= war_max){
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <HAL_UART_RxCpltCallback+0xa8>)
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <HAL_UART_RxCpltCallback+0xb4>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d30a      	bcc.n	80025f6 <HAL_UART_RxCpltCallback+0x8a>
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <HAL_UART_RxCpltCallback+0xa8>)
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_UART_RxCpltCallback+0xb8>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d804      	bhi.n	80025f6 <HAL_UART_RxCpltCallback+0x8a>
			temp_zadana = prosba_temp;
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_UART_RxCpltCallback+0xa8>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <HAL_UART_RxCpltCallback+0xbc>)
 80025f4:	601a      	str	r2, [r3, #0]
		}
		prosba_temp = 0;
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <HAL_UART_RxCpltCallback+0xa8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	801a      	strh	r2, [r3, #0]
	}
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000054 	.word	0x20000054
 8002608:	20000518 	.word	0x20000518
 800260c:	20000660 	.word	0x20000660
 8002610:	200005a0 	.word	0x200005a0
 8002614:	200005a8 	.word	0x200005a8
 8002618:	40004800 	.word	0x40004800
 800261c:	200005a6 	.word	0x200005a6
 8002620:	2000005a 	.word	0x2000005a
 8002624:	20000058 	.word	0x20000058
 8002628:	2000059c 	.word	0x2000059c

0800262c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Btn_up_Pin){
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b10      	cmp	r3, #16
 800263a:	d10b      	bne.n	8002654 <HAL_GPIO_EXTI_Callback+0x28>
		if(temp_zadana <= war_max){
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x54>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x58>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	db04      	blt.n	8002654 <HAL_GPIO_EXTI_Callback+0x28>
			temp_zadana += 1;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x58>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a0c      	ldr	r2, [pc, #48]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x58>)
 8002652:	6013      	str	r3, [r2, #0]
		}
	}
	if (GPIO_Pin == Btn_down_Pin){
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d10b      	bne.n	8002672 <HAL_GPIO_EXTI_Callback+0x46>
		if(temp_zadana >= war_min){
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_GPIO_EXTI_Callback+0x5c>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x58>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	dc04      	bgt.n	8002672 <HAL_GPIO_EXTI_Callback+0x46>
			temp_zadana -= 1;
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x58>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3b01      	subs	r3, #1
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x58>)
 8002670:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000058 	.word	0x20000058
 8002684:	2000059c 	.word	0x2000059c
 8002688:	2000005a 	.word	0x2000005a

0800268c <grzanie_f>:

void grzanie_f(int temp_zadana)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(przek_grzalka_GPIO_Port, przek_grzalka_Pin, GPIO_PIN_SET);
 8002694:	2201      	movs	r2, #1
 8002696:	2102      	movs	r1, #2
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <grzanie_f+0x24>)
 800269a:	f001 fd5b 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(przek_wiatrak_GPIO_Port, przek_wiatrak_Pin, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	2101      	movs	r1, #1
 80026a2:	4804      	ldr	r0, [pc, #16]	@ (80026b4 <grzanie_f+0x28>)
 80026a4:	f001 fd56 	bl	8004154 <HAL_GPIO_WritePin>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021800 	.word	0x40021800

080026b8 <chlodzenie_f>:
void chlodzenie_f(int temp_zadana)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(przek_wiatrak_GPIO_Port, przek_wiatrak_Pin, GPIO_PIN_SET);
 80026c0:	2201      	movs	r2, #1
 80026c2:	2101      	movs	r1, #1
 80026c4:	4805      	ldr	r0, [pc, #20]	@ (80026dc <chlodzenie_f+0x24>)
 80026c6:	f001 fd45 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(przek_grzalka_GPIO_Port, przek_grzalka_Pin, GPIO_PIN_RESET);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2102      	movs	r1, #2
 80026ce:	4804      	ldr	r0, [pc, #16]	@ (80026e0 <chlodzenie_f+0x28>)
 80026d0:	f001 fd40 	bl	8004154 <HAL_GPIO_WritePin>
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40020c00 	.word	0x40020c00

080026e4 <oczekiwanie_f>:
void oczekiwanie_f(int temp_zadana)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(przek_wiatrak_GPIO_Port, przek_wiatrak_Pin, GPIO_PIN_SET);
 80026ec:	2201      	movs	r2, #1
 80026ee:	2101      	movs	r1, #1
 80026f0:	4805      	ldr	r0, [pc, #20]	@ (8002708 <oczekiwanie_f+0x24>)
 80026f2:	f001 fd2f 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(przek_grzalka_GPIO_Port, przek_grzalka_Pin, GPIO_PIN_SET);
 80026f6:	2201      	movs	r2, #1
 80026f8:	2102      	movs	r1, #2
 80026fa:	4804      	ldr	r0, [pc, #16]	@ (800270c <oczekiwanie_f+0x28>)
 80026fc:	f001 fd2a 	bl	8004154 <HAL_GPIO_WritePin>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021800 	.word	0x40021800
 800270c:	40020c00 	.word	0x40020c00

08002710 <odbieranie_usart_f>:

void odbieranie_usart_f()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	BMP2_ReadData(&bmp2dev, &press, &temp);
 8002714:	4a2a      	ldr	r2, [pc, #168]	@ (80027c0 <odbieranie_usart_f+0xb0>)
 8002716:	492b      	ldr	r1, [pc, #172]	@ (80027c4 <odbieranie_usart_f+0xb4>)
 8002718:	482b      	ldr	r0, [pc, #172]	@ (80027c8 <odbieranie_usart_f+0xb8>)
 800271a:	f7ff fcbb 	bl	8002094 <BMP2_ReadData>
	press_calk = 1000.0f * press / 1000;
 800271e:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <odbieranie_usart_f+0xb4>)
 8002720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <odbieranie_usart_f+0xbc>)
 800272a:	f7fd ff7d 	bl	8000628 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <odbieranie_usart_f+0xbc>)
 800273c:	f7fe f89e 	bl	800087c <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f7fe fa30 	bl	8000bac <__aeabi_d2uiz>
 800274c:	4603      	mov	r3, r0
 800274e:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <odbieranie_usart_f+0xc0>)
 8002750:	6013      	str	r3, [r2, #0]
	temp_calk = 1000.0f * temp / 1000;
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <odbieranie_usart_f+0xb0>)
 8002754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <odbieranie_usart_f+0xbc>)
 800275e:	f7fd ff63 	bl	8000628 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <odbieranie_usart_f+0xbc>)
 8002770:	f7fe f884 	bl	800087c <__aeabi_ddiv>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe fa16 	bl	8000bac <__aeabi_d2uiz>
 8002780:	4603      	mov	r3, r0
 8002782:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <odbieranie_usart_f+0xc4>)
 8002784:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart3, rx_buffer, rx_msg_len);
 8002786:	4b14      	ldr	r3, [pc, #80]	@ (80027d8 <odbieranie_usart_f+0xc8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4913      	ldr	r1, [pc, #76]	@ (80027dc <odbieranie_usart_f+0xcc>)
 8002790:	4813      	ldr	r0, [pc, #76]	@ (80027e0 <odbieranie_usart_f+0xd0>)
 8002792:	f004 fc26 	bl	8006fe2 <HAL_UART_Receive_IT>
	if(wartosc_odebrana >= war_min && wartosc_odebrana <= war_max)
 8002796:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <odbieranie_usart_f+0xd4>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <odbieranie_usart_f+0xd8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dc0a      	bgt.n	80027ba <odbieranie_usart_f+0xaa>
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <odbieranie_usart_f+0xdc>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <odbieranie_usart_f+0xd8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	db03      	blt.n	80027ba <odbieranie_usart_f+0xaa>
		temp_zadana = wartosc_odebrana;
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <odbieranie_usart_f+0xd8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	@ (80027f0 <odbieranie_usart_f+0xe0>)
 80027b8:	6013      	str	r3, [r2, #0]
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000308 	.word	0x20000308
 80027c4:	20000310 	.word	0x20000310
 80027c8:	20000018 	.word	0x20000018
 80027cc:	408f4000 	.word	0x408f4000
 80027d0:	20000594 	.word	0x20000594
 80027d4:	20000598 	.word	0x20000598
 80027d8:	20000054 	.word	0x20000054
 80027dc:	20000518 	.word	0x20000518
 80027e0:	20000660 	.word	0x20000660
 80027e4:	2000005a 	.word	0x2000005a
 80027e8:	200005a0 	.word	0x200005a0
 80027ec:	20000058 	.word	0x20000058
 80027f0:	2000059c 	.word	0x2000059c

080027f4 <sterowanie_f>:

void sterowanie_f()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	if (!grzanie && temp_calk < (temp_zadana)) {
 80027f8:	4b33      	ldr	r3, [pc, #204]	@ (80028c8 <sterowanie_f+0xd4>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f083 0301 	eor.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d011      	beq.n	800282a <sterowanie_f+0x36>
 8002806:	4b31      	ldr	r3, [pc, #196]	@ (80028cc <sterowanie_f+0xd8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a31      	ldr	r2, [pc, #196]	@ (80028d0 <sterowanie_f+0xdc>)
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4293      	cmp	r3, r2
 8002810:	d20b      	bcs.n	800282a <sterowanie_f+0x36>
		grzanie = 1;
 8002812:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <sterowanie_f+0xd4>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
	    chlodzenie = 0;
 8002818:	4b2e      	ldr	r3, [pc, #184]	@ (80028d4 <sterowanie_f+0xe0>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
	    grzanie_f(temp_zadana);
 800281e:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <sterowanie_f+0xdc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff32 	bl	800268c <grzanie_f>
 8002828:	e01a      	b.n	8002860 <sterowanie_f+0x6c>
	}
	else if (grzanie && !chlodzenie && temp_calk > (temp_zadana - 1)) {
 800282a:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <sterowanie_f+0xd4>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <sterowanie_f+0x6c>
 8002832:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <sterowanie_f+0xe0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <sterowanie_f+0x6c>
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <sterowanie_f+0xdc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3b01      	subs	r3, #1
 8002846:	461a      	mov	r2, r3
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <sterowanie_f+0xd8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <sterowanie_f+0x6c>
		grzanie = 0;
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <sterowanie_f+0xd4>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
		oczekiwanie_f(temp_zadana);
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <sterowanie_f+0xdc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff42 	bl	80026e4 <oczekiwanie_f>
	}

	if (!chlodzenie && temp_calk > temp_zadana) {
 8002860:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <sterowanie_f+0xe0>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f083 0301 	eor.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <sterowanie_f+0x9e>
 800286e:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <sterowanie_f+0xd8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <sterowanie_f+0xdc>)
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4293      	cmp	r3, r2
 8002878:	d90b      	bls.n	8002892 <sterowanie_f+0x9e>
		chlodzenie = 1;
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <sterowanie_f+0xe0>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
		grzanie = 0;
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <sterowanie_f+0xd4>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
		chlodzenie_f(temp_zadana);
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <sterowanie_f+0xdc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff14 	bl	80026b8 <chlodzenie_f>
	}else if (chlodzenie && !grzanie && temp_calk < temp_zadana) {
		chlodzenie = 0;
		oczekiwanie_f(temp_zadana);
	}
}
 8002890:	e018      	b.n	80028c4 <sterowanie_f+0xd0>
	}else if (chlodzenie && !grzanie && temp_calk < temp_zadana) {
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <sterowanie_f+0xe0>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d014      	beq.n	80028c4 <sterowanie_f+0xd0>
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <sterowanie_f+0xd4>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f083 0301 	eor.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <sterowanie_f+0xd0>
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <sterowanie_f+0xd8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <sterowanie_f+0xdc>)
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d207      	bcs.n	80028c4 <sterowanie_f+0xd0>
		chlodzenie = 0;
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <sterowanie_f+0xe0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
		oczekiwanie_f(temp_zadana);
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <sterowanie_f+0xdc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff10 	bl	80026e4 <oczekiwanie_f>
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	200005a4 	.word	0x200005a4
 80028cc:	20000598 	.word	0x20000598
 80028d0:	2000059c 	.word	0x2000059c
 80028d4:	200005a5 	.word	0x200005a5

080028d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if(htim == &htim4){
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d103      	bne.n	80028f0 <HAL_TIM_PeriodElapsedCallback+0x18>
	  odbieranie_usart_f();
 80028e8:	f7ff ff12 	bl	8002710 <odbieranie_usart_f>
	  sterowanie_f();
 80028ec:	f7ff ff82 	bl	80027f4 <sterowanie_f>
  }
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000614 	.word	0x20000614

080028fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002900:	f000 fc25 	bl	800314e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002904:	f000 f88c 	bl	8002a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002908:	f7ff fd36 	bl	8002378 <MX_GPIO_Init>
  MX_ETH_Init();
 800290c:	f7ff fc26 	bl	800215c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002910:	f000 fab4 	bl	8002e7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002914:	f000 fb4a 	bl	8002fac <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8002918:	f000 f8f0 	bl	8002afc <MX_SPI4_Init>
  MX_TIM4_Init();
 800291c:	f000 fa38 	bl	8002d90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);
 8002920:	4830      	ldr	r0, [pc, #192]	@ (80029e4 <main+0xe8>)
 8002922:	f7ff faeb 	bl	8001efc <BMP2_Init>
  MX_TIM4_Init();
 8002926:	f000 fa33 	bl	8002d90 <MX_TIM4_Init>
  HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 800292a:	4b2f      	ldr	r3, [pc, #188]	@ (80029e8 <main+0xec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	492e      	ldr	r1, [pc, #184]	@ (80029ec <main+0xf0>)
 8002934:	482e      	ldr	r0, [pc, #184]	@ (80029f0 <main+0xf4>)
 8002936:	f004 fb54 	bl	8006fe2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800293a:	482e      	ldr	r0, [pc, #184]	@ (80029f4 <main+0xf8>)
 800293c:	f003 fe16 	bl	800656c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(przek_grzalka_GPIO_Port, przek_grzalka_Pin, GPIO_PIN_SET);
 8002940:	2201      	movs	r2, #1
 8002942:	2102      	movs	r1, #2
 8002944:	482c      	ldr	r0, [pc, #176]	@ (80029f8 <main+0xfc>)
 8002946:	f001 fc05 	bl	8004154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(przek_wiatrak_GPIO_Port, przek_wiatrak_Pin, GPIO_PIN_SET);
 800294a:	2201      	movs	r2, #1
 800294c:	2101      	movs	r1, #1
 800294e:	482b      	ldr	r0, [pc, #172]	@ (80029fc <main+0x100>)
 8002950:	f001 fc00 	bl	8004154 <HAL_GPIO_WritePin>

  BMP2_ReadData(&bmp2dev, &press, &temp);
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <main+0x104>)
 8002956:	492b      	ldr	r1, [pc, #172]	@ (8002a04 <main+0x108>)
 8002958:	4822      	ldr	r0, [pc, #136]	@ (80029e4 <main+0xe8>)
 800295a:	f7ff fb9b 	bl	8002094 <BMP2_ReadData>
  HAL_Delay(10);
 800295e:	200a      	movs	r0, #10
 8002960:	f000 fc52 	bl	8003208 <HAL_Delay>
  BMP2_ReadData(&bmp2dev, &press, &temp);
 8002964:	4a26      	ldr	r2, [pc, #152]	@ (8002a00 <main+0x104>)
 8002966:	4927      	ldr	r1, [pc, #156]	@ (8002a04 <main+0x108>)
 8002968:	481e      	ldr	r0, [pc, #120]	@ (80029e4 <main+0xe8>)
 800296a:	f7ff fb93 	bl	8002094 <BMP2_ReadData>
  temp_zadana = 1000.0f * temp / 1000;
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <main+0x104>)
 8002970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <main+0x10c>)
 800297a:	f7fd fe55 	bl	8000628 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <main+0x10c>)
 800298c:	f7fd ff76 	bl	800087c <__aeabi_ddiv>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe f8e0 	bl	8000b5c <__aeabi_d2iz>
 800299c:	4603      	mov	r3, r0
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <main+0x110>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tx_msg_len = sprintf((char*)tx_buffer, "Aktualna temperatura: %2u C, ustawiona temperatura: %2u C. Ustaw wybrana wartosc temperatury:\r", temp_calk, temp_zadana);
 80029a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <main+0x114>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <main+0x110>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	491a      	ldr	r1, [pc, #104]	@ (8002a14 <main+0x118>)
 80029ac:	480f      	ldr	r0, [pc, #60]	@ (80029ec <main+0xf0>)
 80029ae:	f006 f89f 	bl	8008af0 <siprintf>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <main+0xec>)
 80029b8:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <main+0xec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	2364      	movs	r3, #100	@ 0x64
 80029c2:	490a      	ldr	r1, [pc, #40]	@ (80029ec <main+0xf0>)
 80029c4:	480a      	ldr	r0, [pc, #40]	@ (80029f0 <main+0xf4>)
 80029c6:	f004 fa83 	bl	8006ed0 <HAL_UART_Transmit>
	  odebrane_znaki = 0;
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <main+0x11c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	801a      	strh	r2, [r3, #0]
	  prosba_temp = 0;
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <main+0x120>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(500);
 80029d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029da:	f000 fc15 	bl	8003208 <HAL_Delay>
	  tx_msg_len = sprintf((char*)tx_buffer, "Aktualna temperatura: %2u C, ustawiona temperatura: %2u C. Ustaw wybrana wartosc temperatury:\r", temp_calk, temp_zadana);
 80029de:	bf00      	nop
 80029e0:	e7df      	b.n	80029a2 <main+0xa6>
 80029e2:	bf00      	nop
 80029e4:	20000018 	.word	0x20000018
 80029e8:	20000590 	.word	0x20000590
 80029ec:	20000318 	.word	0x20000318
 80029f0:	20000660 	.word	0x20000660
 80029f4:	20000614 	.word	0x20000614
 80029f8:	40020c00 	.word	0x40020c00
 80029fc:	40021800 	.word	0x40021800
 8002a00:	20000308 	.word	0x20000308
 8002a04:	20000310 	.word	0x20000310
 8002a08:	408f4000 	.word	0x408f4000
 8002a0c:	2000059c 	.word	0x2000059c
 8002a10:	20000598 	.word	0x20000598
 8002a14:	0800947c 	.word	0x0800947c
 8002a18:	200005a6 	.word	0x200005a6
 8002a1c:	200005a8 	.word	0x200005a8

08002a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b094      	sub	sp, #80	@ 0x50
 8002a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a26:	f107 0320 	add.w	r3, r7, #32
 8002a2a:	2230      	movs	r2, #48	@ 0x30
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f006 f87e 	bl	8008b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a44:	f001 fcf2 	bl	800442c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <SystemClock_Config+0xc8>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	4a26      	ldr	r2, [pc, #152]	@ (8002ae8 <SystemClock_Config+0xc8>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a54:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <SystemClock_Config+0xc8>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a60:	4b22      	ldr	r3, [pc, #136]	@ (8002aec <SystemClock_Config+0xcc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a68:	4a20      	ldr	r2, [pc, #128]	@ (8002aec <SystemClock_Config+0xcc>)
 8002a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <SystemClock_Config+0xcc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a80:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a86:	2302      	movs	r3, #2
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a90:	2304      	movs	r3, #4
 8002a92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002a94:	2348      	movs	r3, #72	@ 0x48
 8002a96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa0:	f107 0320 	add.w	r3, r7, #32
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fcd1 	bl	800444c <HAL_RCC_OscConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ab0:	f000 f81e 	bl	8002af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 ff5f 	bl	8004994 <HAL_RCC_ClockConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002adc:	f000 f808 	bl	8002af0 <Error_Handler>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3750      	adds	r7, #80	@ 0x50
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40007000 	.word	0x40007000

08002af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af4:	b672      	cpsid	i
}
 8002af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <Error_Handler+0x8>

08002afc <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b02:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <MX_SPI4_Init+0x78>)
 8002b04:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b0c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b14:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b1a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b1e:	2202      	movs	r2, #2
 8002b20:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002b28:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b32:	2210      	movs	r2, #16
 8002b34:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002b5a:	4805      	ldr	r0, [pc, #20]	@ (8002b70 <MX_SPI4_Init+0x74>)
 8002b5c:	f002 fd30 	bl	80055c0 <HAL_SPI_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002b66:	f7ff ffc3 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200005ac 	.word	0x200005ac
 8002b74:	40013400 	.word	0x40013400

08002b78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <HAL_SPI_MspInit+0x7c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d127      	bne.n	8002bea <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b9a:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <HAL_SPI_MspInit+0x80>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <HAL_SPI_MspInit+0x80>)
 8002ba0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba6:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <HAL_SPI_MspInit+0x80>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bb2:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_SPI_MspInit+0x80>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a10      	ldr	r2, [pc, #64]	@ (8002bf8 <HAL_SPI_MspInit+0x80>)
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <HAL_SPI_MspInit+0x80>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8002bca:	2364      	movs	r3, #100	@ 0x64
 8002bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002bda:	2305      	movs	r3, #5
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4805      	ldr	r0, [pc, #20]	@ (8002bfc <HAL_SPI_MspInit+0x84>)
 8002be6:	f001 f909 	bl	8003dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002bea:	bf00      	nop
 8002bec:	3728      	adds	r7, #40	@ 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40013400 	.word	0x40013400
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <NMI_Handler+0x4>

08002c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <HardFault_Handler+0x4>

08002c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <MemManage_Handler+0x4>

08002c60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c9e:	f000 fa93 	bl	80031c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_down_Pin);
 8002caa:	2002      	movs	r0, #2
 8002cac:	f001 fa6c 	bl	8004188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_up_Pin);
 8002cb8:	2010      	movs	r0, #16
 8002cba:	f001 fa65 	bl	8004188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <TIM4_IRQHandler+0x10>)
 8002cca:	f003 fcc7 	bl	800665c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000614 	.word	0x20000614

08002cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cdc:	4802      	ldr	r0, [pc, #8]	@ (8002ce8 <USART3_IRQHandler+0x10>)
 8002cde:	f004 f9c5 	bl	800706c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000660 	.word	0x20000660

08002cec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002cf0:	4802      	ldr	r0, [pc, #8]	@ (8002cfc <ETH_IRQHandler+0x10>)
 8002cf2:	f000 fceb 	bl	80036cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000024c 	.word	0x2000024c

08002d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d08:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <_sbrk+0x5c>)
 8002d0a:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <_sbrk+0x60>)
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d14:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <_sbrk+0x64>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <_sbrk+0x64>)
 8002d1e:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <_sbrk+0x68>)
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d22:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <_sbrk+0x64>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d207      	bcs.n	8002d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d30:	f005 ff06 	bl	8008b40 <__errno>
 8002d34:	4603      	mov	r3, r0
 8002d36:	220c      	movs	r2, #12
 8002d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	e009      	b.n	8002d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d40:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d46:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <_sbrk+0x64>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	4a05      	ldr	r2, [pc, #20]	@ (8002d64 <_sbrk+0x64>)
 8002d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d52:	68fb      	ldr	r3, [r7, #12]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20050000 	.word	0x20050000
 8002d60:	00000400 	.word	0x00000400
 8002d64:	20000610 	.word	0x20000610
 8002d68:	20000d18 	.word	0x20000d18

08002d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <SystemInit+0x20>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <SystemInit+0x20>)
 8002d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002db0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e2c <MX_TIM4_Init+0x9c>)
 8002db2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4999;
 8002db4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002db6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002dba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 719;
 8002dc2:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002dc4:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002dc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dca:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dd6:	4814      	ldr	r0, [pc, #80]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002dd8:	f003 fb70 	bl	80064bc <HAL_TIM_Base_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002de2:	f7ff fe85 	bl	8002af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4619      	mov	r1, r3
 8002df2:	480d      	ldr	r0, [pc, #52]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002df4:	f003 fd3a 	bl	800686c <HAL_TIM_ConfigClockSource>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002dfe:	f7ff fe77 	bl	8002af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4806      	ldr	r0, [pc, #24]	@ (8002e28 <MX_TIM4_Init+0x98>)
 8002e10:	f003 ff64 	bl	8006cdc <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002e1a:	f7ff fe69 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e1e:	bf00      	nop
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000614 	.word	0x20000614
 8002e2c:	40000800 	.word	0x40000800

08002e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <HAL_TIM_Base_MspInit+0x44>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d113      	bne.n	8002e6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <HAL_TIM_Base_MspInit+0x48>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	4a0c      	ldr	r2, [pc, #48]	@ (8002e78 <HAL_TIM_Base_MspInit+0x48>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_TIM_Base_MspInit+0x48>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	201e      	movs	r0, #30
 8002e60:	f000 fad1 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e64:	201e      	movs	r0, #30
 8002e66:	f000 faea 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40023800 	.word	0x40023800

08002e7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e80:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002e82:	4a15      	ldr	r2, [pc, #84]	@ (8002ed8 <MX_USART3_UART_Init+0x5c>)
 8002e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e86:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002e88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eb2:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ebe:	4805      	ldr	r0, [pc, #20]	@ (8002ed4 <MX_USART3_UART_Init+0x58>)
 8002ec0:	f003 ffb8 	bl	8006e34 <HAL_UART_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002eca:	f7ff fe11 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000660 	.word	0x20000660
 8002ed8:	40004800 	.word	0x40004800

08002edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b0aa      	sub	sp, #168	@ 0xa8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	2284      	movs	r2, #132	@ 0x84
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 fe17 	bl	8008b30 <memset>
  if(uartHandle->Instance==USART3)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <HAL_UART_MspInit+0xc4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d144      	bne.n	8002f96 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f12:	2300      	movs	r3, #0
 8002f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 ff60 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f26:	f7ff fde3 	bl	8002af0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_UART_MspInit+0xc8>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_UART_MspInit+0xc8>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_UART_MspInit+0xc8>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <HAL_UART_MspInit+0xc8>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <HAL_UART_MspInit+0xc8>)
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_UART_MspInit+0xc8>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f74:	2307      	movs	r3, #7
 8002f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f7a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4809      	ldr	r0, [pc, #36]	@ (8002fa8 <HAL_UART_MspInit+0xcc>)
 8002f82:	f000 ff3b 	bl	8003dfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2027      	movs	r0, #39	@ 0x27
 8002f8c:	f000 fa3b 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f90:	2027      	movs	r0, #39	@ 0x27
 8002f92:	f000 fa54 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f96:	bf00      	nop
 8002f98:	37a8      	adds	r7, #168	@ 0xa8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40004800 	.word	0x40004800
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020c00 	.word	0x40020c00

08002fac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fba:	2206      	movs	r2, #6
 8002fbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002fca:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002fee:	4805      	ldr	r0, [pc, #20]	@ (8003004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ff0:	f001 f8e2 	bl	80041b8 <HAL_PCD_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002ffa:	f7ff fd79 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200006e8 	.word	0x200006e8

08003008 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0ac      	sub	sp, #176	@ 0xb0
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	2284      	movs	r2, #132	@ 0x84
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f005 fd81 	bl	8008b30 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003036:	d159      	bne.n	80030ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003038:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800303c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003044:	f107 0318 	add.w	r3, r7, #24
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fec9 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003054:	f7ff fd4c 	bl	8002af0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	4b26      	ldr	r3, [pc, #152]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6313      	str	r3, [r2, #48]	@ 0x30
 8003064:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003070:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800308a:	230a      	movs	r3, #10
 800308c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003090:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003094:	4619      	mov	r1, r3
 8003096:	4818      	ldr	r0, [pc, #96]	@ (80030f8 <HAL_PCD_MspInit+0xf0>)
 8003098:	f000 feb0 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800309c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030b4:	4619      	mov	r1, r3
 80030b6:	4810      	ldr	r0, [pc, #64]	@ (80030f8 <HAL_PCD_MspInit+0xf0>)
 80030b8:	f000 fea0 	bl	8003dfc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030bc:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 80030be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c0:	4a0c      	ldr	r2, [pc, #48]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 80030c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80030c8:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 80030ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	4a06      	ldr	r2, [pc, #24]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 80030da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030de:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <HAL_PCD_MspInit+0xec>)
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80030ec:	bf00      	nop
 80030ee:	37b0      	adds	r7, #176	@ 0xb0
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020000 	.word	0x40020000

080030fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003134 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003100:	f7ff fe34 	bl	8002d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003104:	480c      	ldr	r0, [pc, #48]	@ (8003138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003106:	490d      	ldr	r1, [pc, #52]	@ (800313c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003108:	4a0d      	ldr	r2, [pc, #52]	@ (8003140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800310c:	e002      	b.n	8003114 <LoopCopyDataInit>

0800310e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003112:	3304      	adds	r3, #4

08003114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003118:	d3f9      	bcc.n	800310e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311a:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800311c:	4c0a      	ldr	r4, [pc, #40]	@ (8003148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003120:	e001      	b.n	8003126 <LoopFillZerobss>

08003122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003124:	3204      	adds	r2, #4

08003126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003128:	d3fb      	bcc.n	8003122 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800312a:	f005 fd0f 	bl	8008b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800312e:	f7ff fbe5 	bl	80028fc <main>
  bx  lr    
 8003132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003134:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800313c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8003140:	08009638 	.word	0x08009638
  ldr r2, =_sbss
 8003144:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003148:	20000d14 	.word	0x20000d14

0800314c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC_IRQHandler>

0800314e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003152:	2003      	movs	r0, #3
 8003154:	f000 f94c 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003158:	2000      	movs	r0, #0
 800315a:	f000 f805 	bl	8003168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800315e:	f7ff fd4f 	bl	8002c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_InitTick+0x54>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b12      	ldr	r3, [pc, #72]	@ (80031c0 <HAL_InitTick+0x58>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800317e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f967 	bl	800345a <HAL_SYSTICK_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00e      	b.n	80031b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b0f      	cmp	r3, #15
 800319a:	d80a      	bhi.n	80031b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800319c:	2200      	movs	r2, #0
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f000 f92f 	bl	8003406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a8:	4a06      	ldr	r2, [pc, #24]	@ (80031c4 <HAL_InitTick+0x5c>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	2000005c 	.word	0x2000005c
 80031c0:	20000064 	.word	0x20000064
 80031c4:	20000060 	.word	0x20000060

080031c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_IncTick+0x20>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_IncTick+0x24>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <HAL_IncTick+0x24>)
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000064 	.word	0x20000064
 80031ec:	20000bc8 	.word	0x20000bc8

080031f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b03      	ldr	r3, [pc, #12]	@ (8003204 <HAL_GetTick+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000bc8 	.word	0x20000bc8

08003208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff ffee 	bl	80031f0 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d005      	beq.n	800322e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003222:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <HAL_Delay+0x44>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800322e:	bf00      	nop
 8003230:	f7ff ffde 	bl	80031f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d8f7      	bhi.n	8003230 <HAL_Delay+0x28>
  {
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000064 	.word	0x20000064

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <__NVIC_SetPriorityGrouping+0x40>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 800327a:	4313      	orrs	r3, r2
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <__NVIC_SetPriorityGrouping+0x40>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00
 8003294:	05fa0000 	.word	0x05fa0000

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	@ (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	@ (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	@ (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	@ 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033bc:	d301      	bcc.n	80033c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033be:	2301      	movs	r3, #1
 80033c0:	e00f      	b.n	80033e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <SysTick_Config+0x40>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ca:	210f      	movs	r1, #15
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f7ff ff8e 	bl	80032f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <SysTick_Config+0x40>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033da:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <SysTick_Config+0x40>)
 80033dc:	2207      	movs	r2, #7
 80033de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000e010 	.word	0xe000e010

080033f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff29 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003418:	f7ff ff3e 	bl	8003298 <__NVIC_GetPriorityGrouping>
 800341c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff8e 	bl	8003344 <NVIC_EncodePriority>
 8003428:	4602      	mov	r2, r0
 800342a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff5d 	bl	80032f0 <__NVIC_SetPriority>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff31 	bl	80032b4 <__NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffa2 	bl	80033ac <SysTick_Config>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7ff feb6 	bl	80031f0 <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d008      	beq.n	80034a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e052      	b.n	800354a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0216 	bic.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_DMA_Abort+0x62>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0208 	bic.w	r2, r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f4:	e013      	b.n	800351e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f6:	f7ff fe7b 	bl	80031f0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b05      	cmp	r3, #5
 8003502:	d90c      	bls.n	800351e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e015      	b.n	800354a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e4      	bne.n	80034f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	223f      	movs	r2, #63	@ 0x3f
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d004      	beq.n	8003570 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	@ 0x80
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00c      	b.n	800358a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2205      	movs	r2, #5
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e086      	b.n	80036b8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2223      	movs	r2, #35	@ 0x23
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fe fe1b 	bl	80021f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <HAL_ETH_Init+0x128>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	4a3e      	ldr	r2, [pc, #248]	@ (80036c0 <HAL_ETH_Init+0x128>)
 80035c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ce:	4b3c      	ldr	r3, [pc, #240]	@ (80036c0 <HAL_ETH_Init+0x128>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80035da:	4b3a      	ldr	r3, [pc, #232]	@ (80036c4 <HAL_ETH_Init+0x12c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4a39      	ldr	r2, [pc, #228]	@ (80036c4 <HAL_ETH_Init+0x12c>)
 80035e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80035e6:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <HAL_ETH_Init+0x12c>)
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4935      	ldr	r1, [pc, #212]	@ (80036c4 <HAL_ETH_Init+0x12c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80035f4:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <HAL_ETH_Init+0x12c>)
 80035f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800360e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003610:	f7ff fdee 	bl	80031f0 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003616:	e011      	b.n	800363c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003618:	f7ff fdea 	bl	80031f0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003626:	d909      	bls.n	800363c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2204      	movs	r2, #4
 800362c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	22e0      	movs	r2, #224	@ 0xe0
 8003634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e03d      	b.n	80036b8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e4      	bne.n	8003618 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa5e 	bl	8003b10 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb09 	bl	8003c6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fb5f 	bl	8003d1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	461a      	mov	r2, r3
 8003666:	2100      	movs	r1, #0
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fac7 	bl	8003bfc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800367c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <HAL_ETH_Init+0x130>)
 800368c:	430b      	orrs	r3, r1
 800368e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80036a2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2210      	movs	r2, #16
 80036b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40013800 	.word	0x40013800
 80036c8:	00020060 	.word	0x00020060

080036cc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80036f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003824 <HAL_ETH_IRQHandler+0x158>)
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <HAL_ETH_IRQHandler+0x56>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003716:	461a      	mov	r2, r3
 8003718:	4b43      	ldr	r3, [pc, #268]	@ (8003828 <HAL_ETH_IRQHandler+0x15c>)
 800371a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f891 	bl	8003844 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00f      	beq.n	800374c <HAL_ETH_IRQHandler+0x80>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373e:	461a      	mov	r2, r3
 8003740:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003744:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f872 	bl	8003830 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d042      	beq.n	80037dc <HAL_ETH_IRQHandler+0x110>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03d      	beq.n	80037dc <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01a      	beq.n	80037b0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	4b29      	ldr	r3, [pc, #164]	@ (800382c <HAL_ETH_IRQHandler+0x160>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80037a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037a4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	22e0      	movs	r2, #224	@ 0xe0
 80037aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80037ae:	e012      	b.n	80037d6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	f248 6380 	movw	r3, #34432	@ 0x8680
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ce:	461a      	mov	r2, r3
 80037d0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80037d4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f83e 	bl	8003858 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f838 	bl	800386c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800380e:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <HAL_ETH_IRQHandler+0x158>)
 8003810:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003814:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f832 	bl	8003880 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800381c:	bf00      	nop
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40013c00 	.word	0x40013c00
 8003828:	00010040 	.word	0x00010040
 800382c:	007e2000 	.word	0x007e2000

08003830 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4b53      	ldr	r3, [pc, #332]	@ (80039f8 <ETH_SetMACConfig+0x164>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	7b9b      	ldrb	r3, [r3, #14]
 80038b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	7c12      	ldrb	r2, [r2, #16]
 80038b8:	2a00      	cmp	r2, #0
 80038ba:	d102      	bne.n	80038c2 <ETH_SetMACConfig+0x2e>
 80038bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038c0:	e000      	b.n	80038c4 <ETH_SetMACConfig+0x30>
 80038c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80038c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	7c52      	ldrb	r2, [r2, #17]
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d102      	bne.n	80038d4 <ETH_SetMACConfig+0x40>
 80038ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80038d2:	e000      	b.n	80038d6 <ETH_SetMACConfig+0x42>
 80038d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	7fdb      	ldrb	r3, [r3, #31]
 80038e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80038e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	7f92      	ldrb	r2, [r2, #30]
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	d102      	bne.n	80038fa <ETH_SetMACConfig+0x66>
 80038f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038f8:	e000      	b.n	80038fc <ETH_SetMACConfig+0x68>
 80038fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80038fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	7f1b      	ldrb	r3, [r3, #28]
 8003902:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003904:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800390a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	791b      	ldrb	r3, [r3, #4]
 8003910:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003912:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	f892 2020 	ldrb.w	r2, [r2, #32]
 800391a:	2a00      	cmp	r2, #0
 800391c:	d102      	bne.n	8003924 <ETH_SetMACConfig+0x90>
 800391e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003922:	e000      	b.n	8003926 <ETH_SetMACConfig+0x92>
 8003924:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003926:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	7bdb      	ldrb	r3, [r3, #15]
 800392c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800392e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003934:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800393c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800393e:	4313      	orrs	r3, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003956:	2001      	movs	r0, #1
 8003958:	f7ff fc56 	bl	8003208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003982:	2a00      	cmp	r2, #0
 8003984:	d101      	bne.n	800398a <ETH_SetMACConfig+0xf6>
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	e000      	b.n	800398c <ETH_SetMACConfig+0xf8>
 800398a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800398c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003992:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800399a:	2a01      	cmp	r2, #1
 800399c:	d101      	bne.n	80039a2 <ETH_SetMACConfig+0x10e>
 800399e:	2208      	movs	r2, #8
 80039a0:	e000      	b.n	80039a4 <ETH_SetMACConfig+0x110>
 80039a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80039a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80039ac:	2a01      	cmp	r2, #1
 80039ae:	d101      	bne.n	80039b4 <ETH_SetMACConfig+0x120>
 80039b0:	2204      	movs	r2, #4
 80039b2:	e000      	b.n	80039b6 <ETH_SetMACConfig+0x122>
 80039b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80039be:	2a01      	cmp	r2, #1
 80039c0:	d101      	bne.n	80039c6 <ETH_SetMACConfig+0x132>
 80039c2:	2202      	movs	r2, #2
 80039c4:	e000      	b.n	80039c8 <ETH_SetMACConfig+0x134>
 80039c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039c8:	4313      	orrs	r3, r2
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7ff fc11 	bl	8003208 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	fd20810f 	.word	0xfd20810f

080039fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4b3d      	ldr	r3, [pc, #244]	@ (8003b0c <ETH_SetDMAConfig+0x110>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	7b1b      	ldrb	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <ETH_SetDMAConfig+0x2c>
 8003a22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a26:	e000      	b.n	8003a2a <ETH_SetDMAConfig+0x2e>
 8003a28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	7b5b      	ldrb	r3, [r3, #13]
 8003a2e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a30:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	7f52      	ldrb	r2, [r2, #29]
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d102      	bne.n	8003a40 <ETH_SetDMAConfig+0x44>
 8003a3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a3e:	e000      	b.n	8003a42 <ETH_SetDMAConfig+0x46>
 8003a40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	7b9b      	ldrb	r3, [r3, #14]
 8003a48:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a4a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	7f1b      	ldrb	r3, [r3, #28]
 8003a56:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	7f9b      	ldrb	r3, [r3, #30]
 8003a5e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a60:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a6e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a70:	4313      	orrs	r3, r2
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a80:	461a      	mov	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f7ff fbb8 	bl	8003208 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	791b      	ldrb	r3, [r3, #4]
 8003aaa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ab0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ab6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003abc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ac4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003ac6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ace:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ad4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ade:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ae2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7ff fb89 	bl	8003208 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	f8de3f23 	.word	0xf8de3f23

08003b10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0a6      	sub	sp, #152	@ 0x98
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b24:	2300      	movs	r3, #0
 8003b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b52:	2300      	movs	r3, #0
 8003b54:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fe7f 	bl	8003894 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b96:	2301      	movs	r3, #1
 8003b98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003bc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bcc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bd0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bd6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003be6:	f107 0308 	add.w	r3, r7, #8
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff05 	bl	80039fc <ETH_SetDMAConfig>
}
 8003bf2:	bf00      	nop
 8003bf4:	3798      	adds	r7, #152	@ 0x98
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3305      	adds	r3, #5
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	3204      	adds	r2, #4
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <ETH_MACAddressConfig+0x68>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3303      	adds	r3, #3
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	061a      	lsls	r2, r3, #24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3302      	adds	r3, #2
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	4313      	orrs	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <ETH_MACAddressConfig+0x6c>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6013      	str	r3, [r2, #0]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40028040 	.word	0x40028040
 8003c68:	40028044 	.word	0x40028044

08003c6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e03e      	b.n	8003cf8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68d9      	ldr	r1, [r3, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	3206      	adds	r2, #6
 8003cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d80c      	bhi.n	8003cdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	e004      	b.n	8003ce6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d9bd      	bls.n	8003c7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d10:	611a      	str	r2, [r3, #16]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e048      	b.n	8003dbe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6919      	ldr	r1, [r3, #16]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003d68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	3212      	adds	r2, #18
 8003d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d80c      	bhi.n	8003dae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6919      	ldr	r1, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	440b      	add	r3, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	e004      	b.n	8003db8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d9b3      	bls.n	8003d2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dee:	60da      	str	r2, [r3, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	@ 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e175      	b.n	8004108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f040 8164 	bne.w	8004102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d005      	beq.n	8003e52 <HAL_GPIO_Init+0x56>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d130      	bne.n	8003eb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0201 	and.w	r2, r3, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d017      	beq.n	8003ef0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d123      	bne.n	8003f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	08da      	lsrs	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3208      	adds	r2, #8
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80be 	beq.w	8004102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_GPIO_Init+0x324>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_GPIO_Init+0x324>)
 8003f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f92:	4b63      	ldr	r3, [pc, #396]	@ (8004120 <HAL_GPIO_Init+0x324>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f9e:	4a61      	ldr	r2, [pc, #388]	@ (8004124 <HAL_GPIO_Init+0x328>)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	220f      	movs	r2, #15
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_GPIO_Init+0x32c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d037      	beq.n	800403a <HAL_GPIO_Init+0x23e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a57      	ldr	r2, [pc, #348]	@ (800412c <HAL_GPIO_Init+0x330>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d031      	beq.n	8004036 <HAL_GPIO_Init+0x23a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a56      	ldr	r2, [pc, #344]	@ (8004130 <HAL_GPIO_Init+0x334>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02b      	beq.n	8004032 <HAL_GPIO_Init+0x236>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a55      	ldr	r2, [pc, #340]	@ (8004134 <HAL_GPIO_Init+0x338>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d025      	beq.n	800402e <HAL_GPIO_Init+0x232>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a54      	ldr	r2, [pc, #336]	@ (8004138 <HAL_GPIO_Init+0x33c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01f      	beq.n	800402a <HAL_GPIO_Init+0x22e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a53      	ldr	r2, [pc, #332]	@ (800413c <HAL_GPIO_Init+0x340>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d019      	beq.n	8004026 <HAL_GPIO_Init+0x22a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	@ (8004140 <HAL_GPIO_Init+0x344>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_GPIO_Init+0x226>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a51      	ldr	r2, [pc, #324]	@ (8004144 <HAL_GPIO_Init+0x348>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00d      	beq.n	800401e <HAL_GPIO_Init+0x222>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a50      	ldr	r2, [pc, #320]	@ (8004148 <HAL_GPIO_Init+0x34c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <HAL_GPIO_Init+0x21e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4f      	ldr	r2, [pc, #316]	@ (800414c <HAL_GPIO_Init+0x350>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_GPIO_Init+0x21a>
 8004012:	2309      	movs	r3, #9
 8004014:	e012      	b.n	800403c <HAL_GPIO_Init+0x240>
 8004016:	230a      	movs	r3, #10
 8004018:	e010      	b.n	800403c <HAL_GPIO_Init+0x240>
 800401a:	2308      	movs	r3, #8
 800401c:	e00e      	b.n	800403c <HAL_GPIO_Init+0x240>
 800401e:	2307      	movs	r3, #7
 8004020:	e00c      	b.n	800403c <HAL_GPIO_Init+0x240>
 8004022:	2306      	movs	r3, #6
 8004024:	e00a      	b.n	800403c <HAL_GPIO_Init+0x240>
 8004026:	2305      	movs	r3, #5
 8004028:	e008      	b.n	800403c <HAL_GPIO_Init+0x240>
 800402a:	2304      	movs	r3, #4
 800402c:	e006      	b.n	800403c <HAL_GPIO_Init+0x240>
 800402e:	2303      	movs	r3, #3
 8004030:	e004      	b.n	800403c <HAL_GPIO_Init+0x240>
 8004032:	2302      	movs	r3, #2
 8004034:	e002      	b.n	800403c <HAL_GPIO_Init+0x240>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_GPIO_Init+0x240>
 800403a:	2300      	movs	r3, #0
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f002 0203 	and.w	r2, r2, #3
 8004042:	0092      	lsls	r2, r2, #2
 8004044:	4093      	lsls	r3, r2
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800404c:	4935      	ldr	r1, [pc, #212]	@ (8004124 <HAL_GPIO_Init+0x328>)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	3302      	adds	r3, #2
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405a:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <HAL_GPIO_Init+0x354>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407e:	4a34      	ldr	r2, [pc, #208]	@ (8004150 <HAL_GPIO_Init+0x354>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004084:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_GPIO_Init+0x354>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a8:	4a29      	ldr	r2, [pc, #164]	@ (8004150 <HAL_GPIO_Init+0x354>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ae:	4b28      	ldr	r3, [pc, #160]	@ (8004150 <HAL_GPIO_Init+0x354>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <HAL_GPIO_Init+0x354>)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <HAL_GPIO_Init+0x354>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040fc:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <HAL_GPIO_Init+0x354>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3301      	adds	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	f67f ae86 	bls.w	8003e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3724      	adds	r7, #36	@ 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40013800 	.word	0x40013800
 8004128:	40020000 	.word	0x40020000
 800412c:	40020400 	.word	0x40020400
 8004130:	40020800 	.word	0x40020800
 8004134:	40020c00 	.word	0x40020c00
 8004138:	40021000 	.word	0x40021000
 800413c:	40021400 	.word	0x40021400
 8004140:	40021800 	.word	0x40021800
 8004144:	40021c00 	.word	0x40021c00
 8004148:	40022000 	.word	0x40022000
 800414c:	40022400 	.word	0x40022400
 8004150:	40013c00 	.word	0x40013c00

08004154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
 8004160:	4613      	mov	r3, r2
 8004162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004164:	787b      	ldrb	r3, [r7, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004170:	e003      	b.n	800417a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	041a      	lsls	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	619a      	str	r2, [r3, #24]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004192:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800419e:	4a05      	ldr	r2, [pc, #20]	@ (80041b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fa40 	bl	800262c <HAL_GPIO_EXTI_Callback>
  }
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40013c00 	.word	0x40013c00

080041b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e108      	b.n	80043dc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fe ff0f 	bl	8003008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2203      	movs	r2, #3
 80041ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041f8:	d102      	bne.n	8004200 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f004 f959 	bl	80084bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	7c1a      	ldrb	r2, [r3, #16]
 8004212:	f88d 2000 	strb.w	r2, [sp]
 8004216:	3304      	adds	r3, #4
 8004218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800421a:	f004 f8f5 	bl	8008408 <USB_CoreInit>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d5      	b.n	80043dc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f004 f951 	bl	80084de <USB_SetCurrentMode>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0c6      	b.n	80043dc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	e04a      	b.n	80042ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3315      	adds	r3, #21
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3314      	adds	r3, #20
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	b298      	uxth	r0, r3
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	332e      	adds	r3, #46	@ 0x2e
 8004290:	4602      	mov	r2, r0
 8004292:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3318      	adds	r3, #24
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	331c      	adds	r3, #28
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	3320      	adds	r3, #32
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	3324      	adds	r3, #36	@ 0x24
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	3301      	adds	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	791b      	ldrb	r3, [r3, #4]
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3af      	bcc.n	8004254 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e044      	b.n	8004384 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	429a      	cmp	r2, r3
 800438c:	d3b5      	bcc.n	80042fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7c1a      	ldrb	r2, [r3, #16]
 8004396:	f88d 2000 	strb.w	r2, [sp]
 800439a:	3304      	adds	r3, #4
 800439c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439e:	f004 f8eb 	bl	8008578 <USB_DevInit>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e013      	b.n	80043dc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7b1b      	ldrb	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f80a 	bl	80043e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 faa6 	bl	8008926 <USB_DevDisconnect>

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004412:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <HAL_PCDEx_ActivateLPM+0x44>)
 8004414:	4313      	orrs	r3, r2
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	10000003 	.word	0x10000003

0800442c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004430:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a04      	ldr	r2, [pc, #16]	@ (8004448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40007000 	.word	0x40007000

0800444c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e291      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8087 	beq.w	800457e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004470:	4b96      	ldr	r3, [pc, #600]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b04      	cmp	r3, #4
 800447a:	d00c      	beq.n	8004496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447c:	4b93      	ldr	r3, [pc, #588]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b08      	cmp	r3, #8
 8004486:	d112      	bne.n	80044ae <HAL_RCC_OscConfig+0x62>
 8004488:	4b90      	ldr	r3, [pc, #576]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004494:	d10b      	bne.n	80044ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004496:	4b8d      	ldr	r3, [pc, #564]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d06c      	beq.n	800457c <HAL_RCC_OscConfig+0x130>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d168      	bne.n	800457c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e26b      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x7a>
 80044b8:	4b84      	ldr	r3, [pc, #528]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a83      	ldr	r2, [pc, #524]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e02e      	b.n	8004524 <HAL_RCC_OscConfig+0xd8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x9c>
 80044ce:	4b7f      	ldr	r3, [pc, #508]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7e      	ldr	r2, [pc, #504]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b7c      	ldr	r3, [pc, #496]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a7b      	ldr	r2, [pc, #492]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xd8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0xc0>
 80044f2:	4b76      	ldr	r3, [pc, #472]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a75      	ldr	r2, [pc, #468]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a72      	ldr	r2, [pc, #456]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xd8>
 800450c:	4b6f      	ldr	r3, [pc, #444]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6e      	ldr	r2, [pc, #440]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b6c      	ldr	r3, [pc, #432]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6b      	ldr	r2, [pc, #428]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fe60 	bl	80031f0 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe fe5c 	bl	80031f0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e21f      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b61      	ldr	r3, [pc, #388]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xe8>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fe fe4c 	bl	80031f0 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fe fe48 	bl	80031f0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e20b      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b57      	ldr	r3, [pc, #348]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x110>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d069      	beq.n	800465e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800458a:	4b50      	ldr	r3, [pc, #320]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b4d      	ldr	r3, [pc, #308]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x190>
 80045a2:	4b4a      	ldr	r3, [pc, #296]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b47      	ldr	r3, [pc, #284]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x17a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1df      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	493d      	ldr	r1, [pc, #244]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e040      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d023      	beq.n	800462c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b39      	ldr	r3, [pc, #228]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a38      	ldr	r2, [pc, #224]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fdfe 	bl	80031f0 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fe fdfa 	bl	80031f0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e1bd      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	4b30      	ldr	r3, [pc, #192]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b2d      	ldr	r3, [pc, #180]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4929      	ldr	r1, [pc, #164]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
 800462a:	e018      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462c:	4b27      	ldr	r3, [pc, #156]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a26      	ldr	r2, [pc, #152]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fdda 	bl	80031f0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004640:	f7fe fdd6 	bl	80031f0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e199      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d038      	beq.n	80046dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d019      	beq.n	80046a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b16      	ldr	r3, [pc, #88]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004676:	4a15      	ldr	r2, [pc, #84]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fe fdb7 	bl	80031f0 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004686:	f7fe fdb3 	bl	80031f0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e176      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 800469a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x23a>
 80046a4:	e01a      	b.n	80046dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80046a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046aa:	4a08      	ldr	r2, [pc, #32]	@ (80046cc <HAL_RCC_OscConfig+0x280>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fe fd9d 	bl	80031f0 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fe fd99 	bl	80031f0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d903      	bls.n	80046d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e15c      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
 80046cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	4b91      	ldr	r3, [pc, #580]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ee      	bne.n	80046ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a4 	beq.w	8004832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b88      	ldr	r3, [pc, #544]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	4a87      	ldr	r2, [pc, #540]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	@ 0x40
 8004702:	4b85      	ldr	r3, [pc, #532]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004712:	4b82      	ldr	r3, [pc, #520]	@ (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800471e:	4b7f      	ldr	r3, [pc, #508]	@ (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7e      	ldr	r2, [pc, #504]	@ (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fe fd61 	bl	80031f0 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fe fd5d 	bl	80031f0 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	@ 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e120      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	4b75      	ldr	r3, [pc, #468]	@ (800491c <HAL_RCC_OscConfig+0x4d0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x31a>
 8004758:	4b6f      	ldr	r3, [pc, #444]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	4a6e      	ldr	r2, [pc, #440]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	@ 0x70
 8004764:	e02d      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x33c>
 800476e:	4b6a      	ldr	r3, [pc, #424]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004772:	4a69      	ldr	r2, [pc, #420]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	6713      	str	r3, [r2, #112]	@ 0x70
 800477a:	4b67      	ldr	r3, [pc, #412]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477e:	4a66      	ldr	r2, [pc, #408]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	6713      	str	r3, [r2, #112]	@ 0x70
 8004786:	e01c      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b05      	cmp	r3, #5
 800478e:	d10c      	bne.n	80047aa <HAL_RCC_OscConfig+0x35e>
 8004790:	4b61      	ldr	r3, [pc, #388]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a60      	ldr	r2, [pc, #384]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	4b5e      	ldr	r3, [pc, #376]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a8:	e00b      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
 80047aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b6:	4b58      	ldr	r3, [pc, #352]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	4a57      	ldr	r2, [pc, #348]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fe fd11 	bl	80031f0 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fe fd0d 	bl	80031f0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0ce      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ee      	beq.n	80047d2 <HAL_RCC_OscConfig+0x386>
 80047f4:	e014      	b.n	8004820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fe fcfb 	bl	80031f0 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fe fcf7 	bl	80031f0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b3c      	ldr	r3, [pc, #240]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	4a3b      	ldr	r2, [pc, #236]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80a4 	beq.w	8004984 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800483c:	4b36      	ldr	r3, [pc, #216]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d06b      	beq.n	8004920 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d149      	bne.n	80048e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fe fcc8 	bl	80031f0 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fe fcc4 	bl	80031f0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e087      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	4313      	orrs	r3, r2
 80048a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a18      	ldr	r2, [pc, #96]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe fc98 	bl	80031f0 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fe fc94 	bl	80031f0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e057      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x478>
 80048e2:	e04f      	b.n	8004984 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fe fc7e 	bl	80031f0 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fe fc7a 	bl	80031f0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e03d      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4ac>
 8004916:	e035      	b.n	8004984 <HAL_RCC_OscConfig+0x538>
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004920:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <HAL_RCC_OscConfig+0x544>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d028      	beq.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d121      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11a      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004956:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800

08004994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0d0      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d910      	bls.n	80049dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b67      	ldr	r3, [pc, #412]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 020f 	bic.w	r2, r3, #15
 80049c2:	4965      	ldr	r1, [pc, #404]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a58      	ldr	r2, [pc, #352]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a52      	ldr	r2, [pc, #328]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d040      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d115      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b41      	ldr	r3, [pc, #260]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e073      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3d      	ldr	r3, [pc, #244]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06b      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b39      	ldr	r3, [pc, #228]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4936      	ldr	r1, [pc, #216]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fe fbb2 	bl	80031f0 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fe fbae 	bl	80031f0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e053      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b27      	ldr	r3, [pc, #156]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d210      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 020f 	bic.w	r2, r3, #15
 8004ace:	4922      	ldr	r1, [pc, #136]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	@ (8004b60 <HAL_RCC_ClockConfig+0x1cc>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_ClockConfig+0x1d0>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1d4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fb0e 	bl	8003168 <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	080094dc 	.word	0x080094dc
 8004b64:	2000005c 	.word	0x2000005c
 8004b68:	20000060 	.word	0x20000060

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b094      	sub	sp, #80	@ 0x50
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b84:	4b79      	ldr	r3, [pc, #484]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	f200 80e1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9e:	e0db      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b73      	ldr	r3, [pc, #460]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba4:	e0db      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b73      	ldr	r3, [pc, #460]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004baa:	e0d8      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b6f      	ldr	r3, [pc, #444]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	1a51      	subs	r1, r2, r1
 8004bfa:	6139      	str	r1, [r7, #16]
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ebb2 0801 	subs.w	r8, r2, r1
 8004c24:	4659      	mov	r1, fp
 8004c26:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	4699      	mov	r9, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb18 0303 	adds.w	r3, r8, r3
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	eb49 0303 	adc.w	r3, r9, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	024b      	lsls	r3, r1, #9
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c68:	4621      	mov	r1, r4
 8004c6a:	024a      	lsls	r2, r1, #9
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c7c:	f7fc f806 	bl	8000c8c <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c88:	e058      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8a:	4b38      	ldr	r3, [pc, #224]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	4611      	mov	r1, r2
 8004c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0159      	lsls	r1, r3, #5
 8004cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb6:	0150      	lsls	r0, r2, #5
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb45 0303 	adc.w	r3, r5, r3
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	f7fb ffac 	bl	8000c8c <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3750      	adds	r7, #80	@ 0x50
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	@ (8004d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	2000005c 	.word	0x2000005c

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d94:	f7ff fff0 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	@ (8004db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	080094ec 	.word	0x080094ec

08004db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dbc:	f7ff ffdc 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0b5b      	lsrs	r3, r3, #13
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	@ (8004ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	080094ec 	.word	0x080094ec

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e08:	4b69      	ldr	r3, [pc, #420]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a68      	ldr	r2, [pc, #416]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	4b66      	ldr	r3, [pc, #408]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	4964      	ldr	r1, [pc, #400]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d017      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e48:	4959      	ldr	r1, [pc, #356]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e76:	4b4e      	ldr	r3, [pc, #312]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	494a      	ldr	r1, [pc, #296]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 808b 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	4a39      	ldr	r2, [pc, #228]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ed0:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004edc:	4b35      	ldr	r3, [pc, #212]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a34      	ldr	r2, [pc, #208]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fe f982 	bl	80031f0 <HAL_GetTick>
 8004eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef0:	f7fe f97e 	bl	80031f0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	@ 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e357      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f02:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f0e:	4b28      	ldr	r3, [pc, #160]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d035      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d02e      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f2c:	4b20      	ldr	r3, [pc, #128]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f36:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f42:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f46:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f4e:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f54:	4b16      	ldr	r3, [pc, #88]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d114      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fe f946 	bl	80031f0 <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fe f942 	bl	80031f0 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e319      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ee      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f96:	d111      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004fa4:	4b04      	ldr	r3, [pc, #16]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fa6:	400b      	ands	r3, r1
 8004fa8:	4901      	ldr	r1, [pc, #4]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	0ffffcff 	.word	0x0ffffcff
 8004fbc:	4baa      	ldr	r3, [pc, #680]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4aa9      	ldr	r2, [pc, #676]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004fc6:	6093      	str	r3, [r2, #8]
 8004fc8:	4ba7      	ldr	r3, [pc, #668]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd4:	49a4      	ldr	r1, [pc, #656]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fe6:	4ba0      	ldr	r3, [pc, #640]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fec:	4a9e      	ldr	r2, [pc, #632]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	4999      	ldr	r1, [pc, #612]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005014:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005022:	4991      	ldr	r1, [pc, #580]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005036:	4b8c      	ldr	r3, [pc, #560]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005044:	4988      	ldr	r1, [pc, #544]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005058:	4b83      	ldr	r3, [pc, #524]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005066:	4980      	ldr	r1, [pc, #512]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800507a:	4b7b      	ldr	r3, [pc, #492]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005080:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005088:	4977      	ldr	r1, [pc, #476]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509c:	4b72      	ldr	r3, [pc, #456]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	496f      	ldr	r1, [pc, #444]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050be:	4b6a      	ldr	r3, [pc, #424]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c4:	f023 020c 	bic.w	r2, r3, #12
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050cc:	4966      	ldr	r1, [pc, #408]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050e0:	4b61      	ldr	r3, [pc, #388]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ee:	495e      	ldr	r1, [pc, #376]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005102:	4b59      	ldr	r3, [pc, #356]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005108:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005110:	4955      	ldr	r1, [pc, #340]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005124:	4b50      	ldr	r3, [pc, #320]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005132:	494d      	ldr	r1, [pc, #308]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005146:	4b48      	ldr	r3, [pc, #288]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	4944      	ldr	r1, [pc, #272]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005168:	4b3f      	ldr	r3, [pc, #252]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005176:	493c      	ldr	r1, [pc, #240]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800518a:	4b37      	ldr	r3, [pc, #220]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005198:	4933      	ldr	r1, [pc, #204]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ba:	492b      	ldr	r1, [pc, #172]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051ce:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051dc:	4922      	ldr	r1, [pc, #136]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ec:	d101      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520e:	4b16      	ldr	r3, [pc, #88]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005214:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521c:	4912      	ldr	r1, [pc, #72]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005230:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005236:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005240:	4909      	ldr	r1, [pc, #36]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d006      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80d9 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800525c:	4b02      	ldr	r3, [pc, #8]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a01      	ldr	r2, [pc, #4]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005262:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005268:	40023800 	.word	0x40023800
 800526c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526e:	f7fd ffbf 	bl	80031f0 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005276:	f7fd ffbb 	bl	80031f0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b64      	cmp	r3, #100	@ 0x64
 8005282:	d901      	bls.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e194      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005288:	4b6c      	ldr	r3, [pc, #432]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d021      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11d      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052a8:	4b64      	ldr	r3, [pc, #400]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052b6:	4b61      	ldr	r3, [pc, #388]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	019a      	lsls	r2, r3, #6
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	061b      	lsls	r3, r3, #24
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	4957      	ldr	r1, [pc, #348]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800530e:	d129      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005310:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800531e:	4b47      	ldr	r3, [pc, #284]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005324:	0f1b      	lsrs	r3, r3, #28
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	019a      	lsls	r2, r3, #6
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	431a      	orrs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	071b      	lsls	r3, r3, #28
 8005344:	493d      	ldr	r1, [pc, #244]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800534c:	4b3b      	ldr	r3, [pc, #236]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005352:	f023 021f 	bic.w	r2, r3, #31
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	3b01      	subs	r3, #1
 800535c:	4937      	ldr	r1, [pc, #220]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01d      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005370:	4b32      	ldr	r3, [pc, #200]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005376:	0e1b      	lsrs	r3, r3, #24
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800537e:	4b2f      	ldr	r3, [pc, #188]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005384:	0f1b      	lsrs	r3, r3, #28
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	019a      	lsls	r2, r3, #6
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	431a      	orrs	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	061b      	lsls	r3, r3, #24
 800539e:	431a      	orrs	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	071b      	lsls	r3, r3, #28
 80053a4:	4925      	ldr	r1, [pc, #148]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d011      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	019a      	lsls	r2, r3, #6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	071b      	lsls	r3, r3, #28
 80053d4:	4919      	ldr	r1, [pc, #100]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053dc:	4b17      	ldr	r3, [pc, #92]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7fd ff02 	bl	80031f0 <HAL_GetTick>
 80053ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053f0:	f7fd fefe 	bl	80031f0 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	@ 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0d7      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005402:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 80cd 	bne.w	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005416:	4b09      	ldr	r3, [pc, #36]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a08      	ldr	r2, [pc, #32]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fd fee5 	bl	80031f0 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800542a:	f7fd fee1 	bl	80031f0 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	@ 0x64
 8005436:	d903      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e0ba      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800543c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005440:	4b5e      	ldr	r3, [pc, #376]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800544c:	d0ed      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d12a      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005476:	4b51      	ldr	r3, [pc, #324]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005484:	4b4d      	ldr	r3, [pc, #308]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	4944      	ldr	r1, [pc, #272]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054b2:	4b42      	ldr	r3, [pc, #264]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	3b01      	subs	r3, #1
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	493d      	ldr	r1, [pc, #244]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d022      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e0:	d11d      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054e2:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054f0:	4b32      	ldr	r3, [pc, #200]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	0f1b      	lsrs	r3, r3, #28
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	019a      	lsls	r2, r3, #6
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	4929      	ldr	r1, [pc, #164]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d028      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800552a:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005538:	4b20      	ldr	r3, [pc, #128]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	019a      	lsls	r2, r3, #6
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	431a      	orrs	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	071b      	lsls	r3, r3, #28
 800555e:	4917      	ldr	r1, [pc, #92]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005566:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800556c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	4911      	ldr	r1, [pc, #68]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800557c:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0e      	ldr	r2, [pc, #56]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fd fe32 	bl	80031f0 <HAL_GetTick>
 800558c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005590:	f7fd fe2e 	bl	80031f0 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	@ 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e007      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055a2:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ae:	d1ef      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e09d      	b.n	800570e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d108      	bne.n	80055ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e2:	d009      	beq.n	80055f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	61da      	str	r2, [r3, #28]
 80055ea:	e005      	b.n	80055f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fd fab0 	bl	8002b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800562e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005638:	d902      	bls.n	8005640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	e002      	b.n	8005646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Init+0xa0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a2:	ea42 0103 	orr.w	r1, r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	f003 0204 	and.w	r2, r3, #4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056dc:	ea42 0103 	orr.w	r1, r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b088      	sub	sp, #32
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_SPI_Transmit+0x22>
 8005734:	2302      	movs	r3, #2
 8005736:	e15f      	b.n	80059f8 <HAL_SPI_Transmit+0x2e2>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005740:	f7fd fd56 	bl	80031f0 <HAL_GetTick>
 8005744:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	d002      	beq.n	800575c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005756:	2302      	movs	r3, #2
 8005758:	77fb      	strb	r3, [r7, #31]
    goto error;
 800575a:	e148      	b.n	80059ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_SPI_Transmit+0x52>
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800576c:	e13f      	b.n	80059ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2203      	movs	r2, #3
 8005772:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b8:	d10f      	bne.n	80057da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d007      	beq.n	80057f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005800:	d94f      	bls.n	80058a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_Transmit+0xfa>
 800580a:	8afb      	ldrh	r3, [r7, #22]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d142      	bne.n	8005896 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005814:	881a      	ldrh	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005834:	e02f      	b.n	8005896 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d112      	bne.n	800586a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	881a      	ldrh	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005854:	1c9a      	adds	r2, r3, #2
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005868:	e015      	b.n	8005896 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586a:	f7fd fcc1 	bl	80031f0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d803      	bhi.n	8005882 <HAL_SPI_Transmit+0x16c>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d102      	bne.n	8005888 <HAL_SPI_Transmit+0x172>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005894:	e0ab      	b.n	80059ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1ca      	bne.n	8005836 <HAL_SPI_Transmit+0x120>
 80058a0:	e080      	b.n	80059a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_SPI_Transmit+0x19a>
 80058aa:	8afb      	ldrh	r3, [r7, #22]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d174      	bne.n	800599a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d912      	bls.n	80058e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b02      	subs	r3, #2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058de:	e05c      	b.n	800599a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005906:	e048      	b.n	800599a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d12b      	bne.n	800596e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d912      	bls.n	8005946 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005924:	881a      	ldrh	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b02      	subs	r3, #2
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005944:	e029      	b.n	800599a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800596c:	e015      	b.n	800599a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596e:	f7fd fc3f 	bl	80031f0 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d803      	bhi.n	8005986 <HAL_SPI_Transmit+0x270>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d102      	bne.n	800598c <HAL_SPI_Transmit+0x276>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005998:	e029      	b.n	80059ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1b1      	bne.n	8005908 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fd1d 	bl	80063e8 <SPI_EndRxTxTransaction>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e003      	b.n	80059ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
 8005a22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a24:	e11a      	b.n	8005c5c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a2e:	d112      	bne.n	8005a56 <HAL_SPI_Receive+0x56>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10e      	bne.n	8005a56 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	4613      	mov	r3, r2
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f90e 	bl	8005c6e <HAL_SPI_TransmitReceive>
 8005a52:	4603      	mov	r3, r0
 8005a54:	e107      	b.n	8005c66 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_SPI_Receive+0x64>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e100      	b.n	8005c66 <HAL_SPI_Receive+0x266>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6c:	f7fd fbc0 	bl	80031f0 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_Receive+0x7e>
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a82:	e0eb      	b.n	8005c5c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2204      	movs	r2, #4
 8005a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ace:	d908      	bls.n	8005ae2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	e007      	b.n	8005af2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005af0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afa:	d10f      	bne.n	8005b1c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b26:	2b40      	cmp	r3, #64	@ 0x40
 8005b28:	d007      	beq.n	8005b3a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b42:	d86f      	bhi.n	8005c24 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b44:	e034      	b.n	8005bb0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d117      	bne.n	8005b84 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f103 020c 	add.w	r2, r3, #12
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b82:	e015      	b.n	8005bb0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b84:	f7fd fb34 	bl	80031f0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d803      	bhi.n	8005b9c <HAL_SPI_Receive+0x19c>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9a:	d102      	bne.n	8005ba2 <HAL_SPI_Receive+0x1a2>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005bae:	e055      	b.n	8005c5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1c4      	bne.n	8005b46 <HAL_SPI_Receive+0x146>
 8005bbc:	e038      	b.n	8005c30 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d115      	bne.n	8005bf8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	b292      	uxth	r2, r2
 8005bd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005bf6:	e015      	b.n	8005c24 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf8:	f7fd fafa 	bl	80031f0 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d803      	bhi.n	8005c10 <HAL_SPI_Receive+0x210>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Receive+0x216>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005c22:	e01b      	b.n	8005c5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1c6      	bne.n	8005bbe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fb5b 	bl	80062f0 <SPI_EndRxTransaction>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	e003      	b.n	8005c5c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08a      	sub	sp, #40	@ 0x28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x26>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e20a      	b.n	80060aa <HAL_SPI_TransmitReceive+0x43c>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9c:	f7fd faa8 	bl	80031f0 <HAL_GetTick>
 8005ca0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ca8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cb8:	7efb      	ldrb	r3, [r7, #27]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d00e      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x6e>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cc4:	d106      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x66>
 8005cce:	7efb      	ldrb	r3, [r7, #27]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d003      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005cda:	e1e0      	b.n	800609e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x80>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x80>
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005cf4:	e1d3      	b.n	800609e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d003      	beq.n	8005d0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2205      	movs	r2, #5
 8005d06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	887a      	ldrh	r2, [r7, #2]
 8005d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	887a      	ldrh	r2, [r7, #2]
 8005d22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	887a      	ldrh	r2, [r7, #2]
 8005d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	887a      	ldrh	r2, [r7, #2]
 8005d36:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d4c:	d802      	bhi.n	8005d54 <HAL_SPI_TransmitReceive+0xe6>
 8005d4e:	8a3b      	ldrh	r3, [r7, #16]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d908      	bls.n	8005d66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	e007      	b.n	8005d76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	d007      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d9c:	f240 8081 	bls.w	8005ea2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x140>
 8005da8:	8a7b      	ldrh	r3, [r7, #18]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d16d      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	881a      	ldrh	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	1c9a      	adds	r2, r3, #2
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd2:	e05a      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d11b      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x1ac>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d016      	beq.n	8005e1a <HAL_SPI_TransmitReceive+0x1ac>
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d113      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df6:	881a      	ldrh	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d11c      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x1f4>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d016      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e62:	f7fd f9c5 	bl	80031f0 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d80b      	bhi.n	8005e8a <HAL_SPI_TransmitReceive+0x21c>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d007      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e88:	e109      	b.n	800609e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d19f      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x166>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d199      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x166>
 8005ea0:	e0e3      	b.n	800606a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x244>
 8005eaa:	8a7b      	ldrh	r3, [r7, #18]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 80cf 	bne.w	8006050 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d912      	bls.n	8005ee2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	1c9a      	adds	r2, r3, #2
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b02      	subs	r3, #2
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ee0:	e0b6      	b.n	8006050 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f08:	e0a2      	b.n	8006050 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d134      	bne.n	8005f82 <HAL_SPI_TransmitReceive+0x314>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d02f      	beq.n	8005f82 <HAL_SPI_TransmitReceive+0x314>
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d12c      	bne.n	8005f82 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d912      	bls.n	8005f58 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f42:	1c9a      	adds	r2, r3, #2
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b02      	subs	r3, #2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f56:	e012      	b.n	8005f7e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	7812      	ldrb	r2, [r2, #0]
 8005f64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d148      	bne.n	8006022 <HAL_SPI_TransmitReceive+0x3b4>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d042      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d923      	bls.n	8005ff0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b02      	subs	r3, #2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d81f      	bhi.n	800601e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	e016      	b.n	800601e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f103 020c 	add.w	r2, r3, #12
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800601e:	2301      	movs	r3, #1
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006022:	f7fd f8e5 	bl	80031f0 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602e:	429a      	cmp	r2, r3
 8006030:	d803      	bhi.n	800603a <HAL_SPI_TransmitReceive+0x3cc>
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d102      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x3d2>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800604e:	e026      	b.n	800609e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	f47f af57 	bne.w	8005f0a <HAL_SPI_TransmitReceive+0x29c>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	f47f af50 	bne.w	8005f0a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f9ba 	bl	80063e8 <SPI_EndRxTxTransaction>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006094:	e003      	b.n	800609e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80060a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3728      	adds	r7, #40	@ 0x28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060c4:	f7fd f894 	bl	80031f0 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060d4:	f7fd f88c 	bl	80031f0 <HAL_GetTick>
 80060d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060da:	4b39      	ldr	r3, [pc, #228]	@ (80061c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	015b      	lsls	r3, r3, #5
 80060e0:	0d1b      	lsrs	r3, r3, #20
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	fb02 f303 	mul.w	r3, r2, r3
 80060e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ea:	e054      	b.n	8006196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d050      	beq.n	8006196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060f4:	f7fd f87c 	bl	80031f0 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	429a      	cmp	r2, r3
 8006102:	d902      	bls.n	800610a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d13d      	bne.n	8006186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006122:	d111      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800612c:	d004      	beq.n	8006138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006136:	d107      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006150:	d10f      	bne.n	8006172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e017      	b.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	3b01      	subs	r3, #1
 8006194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4013      	ands	r3, r2
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d19b      	bne.n	80060ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3720      	adds	r7, #32
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	2000005c 	.word	0x2000005c

080061c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08a      	sub	sp, #40	@ 0x28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061d6:	f7fd f80b 	bl	80031f0 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	4413      	add	r3, r2
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80061e6:	f7fd f803 	bl	80031f0 <HAL_GetTick>
 80061ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061f4:	4b3d      	ldr	r3, [pc, #244]	@ (80062ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	00da      	lsls	r2, r3, #3
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	0d1b      	lsrs	r3, r3, #20
 8006204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800620c:	e060      	b.n	80062d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006214:	d107      	bne.n	8006226 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006224:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d050      	beq.n	80062d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800622e:	f7fc ffdf 	bl	80031f0 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623a:	429a      	cmp	r2, r3
 800623c:	d902      	bls.n	8006244 <SPI_WaitFifoStateUntilTimeout+0x80>
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d13d      	bne.n	80062c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006252:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800625c:	d111      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006266:	d004      	beq.n	8006272 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006270:	d107      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800628a:	d10f      	bne.n	80062ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e010      	b.n	80062e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d196      	bne.n	800620e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3728      	adds	r7, #40	@ 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2000005c 	.word	0x2000005c

080062f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006304:	d111      	bne.n	800632a <SPI_EndRxTransaction+0x3a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630e:	d004      	beq.n	800631a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006318:	d107      	bne.n	800632a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006328:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006332:	d112      	bne.n	800635a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	2180      	movs	r1, #128	@ 0x80
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff feb8 	bl	80060b4 <SPI_WaitFlagStateUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d021      	beq.n	800638e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e03d      	b.n	80063d6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800635a:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <SPI_EndRxTransaction+0xf0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a21      	ldr	r2, [pc, #132]	@ (80063e4 <SPI_EndRxTransaction+0xf4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	0d5b      	lsrs	r3, r3, #21
 8006366:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	3b01      	subs	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006386:	2b80      	cmp	r3, #128	@ 0x80
 8006388:	d0f2      	beq.n	8006370 <SPI_EndRxTransaction+0x80>
 800638a:	e000      	b.n	800638e <SPI_EndRxTransaction+0x9e>
        break;
 800638c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006396:	d11d      	bne.n	80063d4 <SPI_EndRxTransaction+0xe4>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a0:	d004      	beq.n	80063ac <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063aa:	d113      	bne.n	80063d4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff03 	bl	80061c4 <SPI_WaitFifoStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e000      	b.n	80063d6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000005c 	.word	0x2000005c
 80063e4:	165e9f81 	.word	0x165e9f81

080063e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fedf 	bl	80061c4 <SPI_WaitFifoStateUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e046      	b.n	80064aa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800641c:	4b25      	ldr	r3, [pc, #148]	@ (80064b4 <SPI_EndRxTxTransaction+0xcc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a25      	ldr	r2, [pc, #148]	@ (80064b8 <SPI_EndRxTxTransaction+0xd0>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	0d5b      	lsrs	r3, r3, #21
 8006428:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800643a:	d112      	bne.n	8006462 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	2180      	movs	r1, #128	@ 0x80
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fe34 	bl	80060b4 <SPI_WaitFlagStateUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d016      	beq.n	8006480 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e023      	b.n	80064aa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3b01      	subs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006478:	2b80      	cmp	r3, #128	@ 0x80
 800647a:	d0f2      	beq.n	8006462 <SPI_EndRxTxTransaction+0x7a>
 800647c:	e000      	b.n	8006480 <SPI_EndRxTxTransaction+0x98>
        break;
 800647e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2200      	movs	r2, #0
 8006488:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fe99 	bl	80061c4 <SPI_WaitFifoStateUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e000      	b.n	80064aa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	2000005c 	.word	0x2000005c
 80064b8:	165e9f81 	.word	0x165e9f81

080064bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e049      	b.n	8006562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fc fca4 	bl	8002e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 faa8 	bl	8006a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d001      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e054      	b.n	800662e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a26      	ldr	r2, [pc, #152]	@ (800663c <HAL_TIM_Base_Start_IT+0xd0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ae:	d01d      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a22      	ldr	r2, [pc, #136]	@ (8006640 <HAL_TIM_Base_Start_IT+0xd4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <HAL_TIM_Base_Start_IT+0xd8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006648 <HAL_TIM_Base_Start_IT+0xdc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	@ (800664c <HAL_TIM_Base_Start_IT+0xe0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006650 <HAL_TIM_Base_Start_IT+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x80>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <HAL_TIM_Base_Start_IT+0xe8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d115      	bne.n	8006618 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	4b19      	ldr	r3, [pc, #100]	@ (8006658 <HAL_TIM_Base_Start_IT+0xec>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d015      	beq.n	800662a <HAL_TIM_Base_Start_IT+0xbe>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006604:	d011      	beq.n	800662a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006616:	e008      	b.n	800662a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	e000      	b.n	800662c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40001800 	.word	0x40001800
 8006658:	00010007 	.word	0x00010007

0800665c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d020      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0202 	mvn.w	r2, #2
 8006690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9b4 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9a6 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f9b7 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01b      	beq.n	800670c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0204 	mvn.w	r2, #4
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f98e 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f980 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f991 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d020      	beq.n	8006758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0208 	mvn.w	r2, #8
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f968 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f95a 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f96b 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f942 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f934 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f945 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0201 	mvn.w	r2, #1
 80067c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc f888 	bl	80028d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00c      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fb0b 	bl	8006e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00c      	beq.n	800681a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb03 	bl	8006e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00c      	beq.n	800683e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f8ff 	bl	8006a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d007      	beq.n	8006862 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f06f 0220 	mvn.w	r2, #32
 800685a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 facb 	bl	8006df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_TIM_ConfigClockSource+0x1c>
 8006884:	2302      	movs	r3, #2
 8006886:	e0b4      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x186>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	4b56      	ldr	r3, [pc, #344]	@ (80069fc <HAL_TIM_ConfigClockSource+0x190>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c0:	d03e      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0xd4>
 80068c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c6:	f200 8087 	bhi.w	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 80068ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ce:	f000 8086 	beq.w	80069de <HAL_TIM_ConfigClockSource+0x172>
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d6:	d87f      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b70      	cmp	r3, #112	@ 0x70
 80068da:	d01a      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0xa6>
 80068dc:	2b70      	cmp	r3, #112	@ 0x70
 80068de:	d87b      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b60      	cmp	r3, #96	@ 0x60
 80068e2:	d050      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x11a>
 80068e4:	2b60      	cmp	r3, #96	@ 0x60
 80068e6:	d877      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b50      	cmp	r3, #80	@ 0x50
 80068ea:	d03c      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0xfa>
 80068ec:	2b50      	cmp	r3, #80	@ 0x50
 80068ee:	d873      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d058      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x13a>
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	d86f      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d064      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15a>
 80068fc:	2b30      	cmp	r3, #48	@ 0x30
 80068fe:	d86b      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d060      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006904:	2b20      	cmp	r3, #32
 8006906:	d867      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05c      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15a>
 800690c:	2b10      	cmp	r3, #16
 800690e:	d05a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006910:	e062      	b.n	80069d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	f000 f9bb 	bl	8006c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	609a      	str	r2, [r3, #8]
      break;
 800693e:	e04f      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	f000 f9a4 	bl	8006c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006962:	609a      	str	r2, [r3, #8]
      break;
 8006964:	e03c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	461a      	mov	r2, r3
 8006974:	f000 f918 	bl	8006ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2150      	movs	r1, #80	@ 0x50
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f971 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006984:	e02c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006992:	461a      	mov	r2, r3
 8006994:	f000 f937 	bl	8006c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2160      	movs	r1, #96	@ 0x60
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f961 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e01c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 f8f8 	bl	8006ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2140      	movs	r1, #64	@ 0x40
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f951 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f000 f948 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	fffeff88 	.word	0xfffeff88

08006a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a46      	ldr	r2, [pc, #280]	@ (8006b7c <TIM_Base_SetConfig+0x12c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6e:	d00f      	beq.n	8006a90 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a43      	ldr	r2, [pc, #268]	@ (8006b80 <TIM_Base_SetConfig+0x130>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <TIM_Base_SetConfig+0x40>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a42      	ldr	r2, [pc, #264]	@ (8006b84 <TIM_Base_SetConfig+0x134>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a41      	ldr	r2, [pc, #260]	@ (8006b88 <TIM_Base_SetConfig+0x138>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a40      	ldr	r2, [pc, #256]	@ (8006b8c <TIM_Base_SetConfig+0x13c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d108      	bne.n	8006aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a35      	ldr	r2, [pc, #212]	@ (8006b7c <TIM_Base_SetConfig+0x12c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d02b      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab0:	d027      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a32      	ldr	r2, [pc, #200]	@ (8006b80 <TIM_Base_SetConfig+0x130>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d023      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a31      	ldr	r2, [pc, #196]	@ (8006b84 <TIM_Base_SetConfig+0x134>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01f      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a30      	ldr	r2, [pc, #192]	@ (8006b88 <TIM_Base_SetConfig+0x138>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d01b      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2f      	ldr	r2, [pc, #188]	@ (8006b8c <TIM_Base_SetConfig+0x13c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d017      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8006b90 <TIM_Base_SetConfig+0x140>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2d      	ldr	r2, [pc, #180]	@ (8006b94 <TIM_Base_SetConfig+0x144>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00f      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8006b98 <TIM_Base_SetConfig+0x148>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00b      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2b      	ldr	r2, [pc, #172]	@ (8006b9c <TIM_Base_SetConfig+0x14c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d007      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	@ (8006ba0 <TIM_Base_SetConfig+0x150>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d003      	beq.n	8006b02 <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a29      	ldr	r2, [pc, #164]	@ (8006ba4 <TIM_Base_SetConfig+0x154>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d108      	bne.n	8006b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a10      	ldr	r2, [pc, #64]	@ (8006b7c <TIM_Base_SetConfig+0x12c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_Base_SetConfig+0xf8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <TIM_Base_SetConfig+0x13c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d103      	bne.n	8006b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f023 0201 	bic.w	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	611a      	str	r2, [r3, #16]
  }
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40000400 	.word	0x40000400
 8006b84:	40000800 	.word	0x40000800
 8006b88:	40000c00 	.word	0x40000c00
 8006b8c:	40010400 	.word	0x40010400
 8006b90:	40014000 	.word	0x40014000
 8006b94:	40014400 	.word	0x40014400
 8006b98:	40014800 	.word	0x40014800
 8006b9c:	40001800 	.word	0x40001800
 8006ba0:	40001c00 	.word	0x40001c00
 8006ba4:	40002000 	.word	0x40002000

08006ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f023 0201 	bic.w	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 030a 	bic.w	r3, r3, #10
 8006be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0210 	bic.w	r2, r3, #16
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	031b      	lsls	r3, r3, #12
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f043 0307 	orr.w	r3, r3, #7
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	021a      	lsls	r2, r3, #8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e06d      	b.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a30      	ldr	r2, [pc, #192]	@ (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a2f      	ldr	r2, [pc, #188]	@ (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d108      	bne.n	8006d3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a20      	ldr	r2, [pc, #128]	@ (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d022      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d66:	d01d      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1c      	ldr	r2, [pc, #112]	@ (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1a      	ldr	r2, [pc, #104]	@ (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a15      	ldr	r2, [pc, #84]	@ (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a16      	ldr	r2, [pc, #88]	@ (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10c      	bne.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40010400 	.word	0x40010400
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40000800 	.word	0x40000800
 8006dec:	40000c00 	.word	0x40000c00
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40001800 	.word	0x40001800

08006df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e040      	b.n	8006ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fc f840 	bl	8002edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2224      	movs	r2, #36	@ 0x24
 8006e60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fe4c 	bl	8007b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fbe5 	bl	8007650 <UART_SetConfig>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e01b      	b.n	8006ec8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fecb 	bl	8007c5c <UART_CheckIdleState>
 8006ec6:	4603      	mov	r3, r0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	@ 0x28
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d177      	bne.n	8006fd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_UART_Transmit+0x24>
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e070      	b.n	8006fda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2221      	movs	r2, #33	@ 0x21
 8006f04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f06:	f7fc f973 	bl	80031f0 <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	88fa      	ldrh	r2, [r7, #6]
 8006f18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f24:	d108      	bne.n	8006f38 <HAL_UART_Transmit+0x68>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	e003      	b.n	8006f40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f40:	e02f      	b.n	8006fa2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2180      	movs	r1, #128	@ 0x80
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fedc 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e03b      	b.n	8006fda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e007      	b.n	8006f90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1c9      	bne.n	8006f42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2140      	movs	r1, #64	@ 0x40
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fea6 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e005      	b.n	8006fda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08a      	sub	sp, #40	@ 0x28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d132      	bne.n	8007060 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_UART_Receive_IT+0x24>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e02b      	b.n	8007062 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	613b      	str	r3, [r7, #16]
   return(result);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	623b      	str	r3, [r7, #32]
 800703e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69f9      	ldr	r1, [r7, #28]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	61bb      	str	r3, [r7, #24]
   return(result);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e6      	bne.n	800701e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	461a      	mov	r2, r3
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fec4 	bl	8007de4 <UART_Start_Receive_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	e000      	b.n	8007062 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007060:	2302      	movs	r3, #2
  }
}
 8007062:	4618      	mov	r0, r3
 8007064:	3728      	adds	r7, #40	@ 0x28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b0ba      	sub	sp, #232	@ 0xe8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007092:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007096:	f640 030f 	movw	r3, #2063	@ 0x80f
 800709a:	4013      	ands	r3, r2
 800709c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80070a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d115      	bne.n	80070d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00f      	beq.n	80070d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d009      	beq.n	80070d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8297 	beq.w	80075f8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
      }
      return;
 80070d2:	e291      	b.n	80075f8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8117 	beq.w	800730c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80070ee:	4b85      	ldr	r3, [pc, #532]	@ (8007304 <HAL_UART_IRQHandler+0x298>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 810a 	beq.w	800730c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <HAL_UART_IRQHandler+0xbc>
 8007104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2201      	movs	r2, #1
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d011      	beq.n	8007158 <HAL_UART_IRQHandler+0xec>
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2202      	movs	r2, #2
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714e:	f043 0204 	orr.w	r2, r3, #4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d011      	beq.n	8007188 <HAL_UART_IRQHandler+0x11c>
 8007164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2204      	movs	r2, #4
 8007176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800717e:	f043 0202 	orr.w	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d017      	beq.n	80071c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2208      	movs	r2, #8
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ba:	f043 0208 	orr.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d012      	beq.n	80071f6 <HAL_UART_IRQHandler+0x18a>
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00c      	beq.n	80071f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ec:	f043 0220 	orr.w	r2, r3, #32
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 81fd 	beq.w	80075fc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723e:	2b40      	cmp	r3, #64	@ 0x40
 8007240:	d005      	beq.n	800724e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007246:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800724a:	2b00      	cmp	r3, #0
 800724c:	d04f      	beq.n	80072ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fe8e 	bl	8007f70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725e:	2b40      	cmp	r3, #64	@ 0x40
 8007260:	d141      	bne.n	80072e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3308      	adds	r3, #8
 8007268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800727c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800728e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800729a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1d9      	bne.n	8007262 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d013      	beq.n	80072de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	4a13      	ldr	r2, [pc, #76]	@ (8007308 <HAL_UART_IRQHandler+0x29c>)
 80072bc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fc f945 	bl	8003552 <HAL_DMA_Abort_IT>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072d8:	4610      	mov	r0, r2
 80072da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e00f      	b.n	80072fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f9a0 	bl	8007624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	e00b      	b.n	80072fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f99c 	bl	8007624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	e007      	b.n	80072fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f998 	bl	8007624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80072fc:	e17e      	b.n	80075fc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fe:	bf00      	nop
    return;
 8007300:	e17c      	b.n	80075fc <HAL_UART_IRQHandler+0x590>
 8007302:	bf00      	nop
 8007304:	04000120 	.word	0x04000120
 8007308:	08008039 	.word	0x08008039

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007310:	2b01      	cmp	r3, #1
 8007312:	f040 814c 	bne.w	80075ae <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8145 	beq.w	80075ae <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 813e 	beq.w	80075ae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2210      	movs	r2, #16
 8007338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007344:	2b40      	cmp	r3, #64	@ 0x40
 8007346:	f040 80b6 	bne.w	80074b6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007356:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8150 	beq.w	8007600 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800736a:	429a      	cmp	r2, r3
 800736c:	f080 8148 	bcs.w	8007600 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007376:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007384:	f000 8086 	beq.w	8007494 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800739c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1da      	bne.n	8007388 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e1      	bne.n	80073d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800741e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007424:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007432:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007434:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007438:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e3      	bne.n	800740e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007464:	f023 0310 	bic.w	r3, r3, #16
 8007468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007476:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007478:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800747c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e4      	bne.n	8007454 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800748e:	4618      	mov	r0, r3
 8007490:	f7fb ffef 	bl	8003472 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8c2 	bl	8007638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074b4:	e0a4      	b.n	8007600 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 8096 	beq.w	8007604 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80074d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8091 	beq.w	8007604 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007504:	647b      	str	r3, [r7, #68]	@ 0x44
 8007506:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800750a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e4      	bne.n	80074e2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	623b      	str	r3, [r7, #32]
   return(result);
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3308      	adds	r3, #8
 8007538:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800753c:	633a      	str	r2, [r7, #48]	@ 0x30
 800753e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e3      	bne.n	8007518 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	60fb      	str	r3, [r7, #12]
   return(result);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f023 0310 	bic.w	r3, r3, #16
 8007578:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69b9      	ldr	r1, [r7, #24]
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	617b      	str	r3, [r7, #20]
   return(result);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e4      	bne.n	8007564 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f846 	bl	8007638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ac:	e02a      	b.n	8007604 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00e      	beq.n	80075d8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d01c      	beq.n	8007608 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
    }
    return;
 80075d6:	e017      	b.n	8007608 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d012      	beq.n	800760a <HAL_UART_IRQHandler+0x59e>
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fd37 	bl	8008064 <UART_EndTransmit_IT>
    return;
 80075f6:	e008      	b.n	800760a <HAL_UART_IRQHandler+0x59e>
      return;
 80075f8:	bf00      	nop
 80075fa:	e006      	b.n	800760a <HAL_UART_IRQHandler+0x59e>
    return;
 80075fc:	bf00      	nop
 80075fe:	e004      	b.n	800760a <HAL_UART_IRQHandler+0x59e>
      return;
 8007600:	bf00      	nop
 8007602:	e002      	b.n	800760a <HAL_UART_IRQHandler+0x59e>
      return;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <HAL_UART_IRQHandler+0x59e>
    return;
 8007608:	bf00      	nop
  }

}
 800760a:	37e8      	adds	r7, #232	@ 0xe8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4ba6      	ldr	r3, [pc, #664]	@ (8007914 <UART_SetConfig+0x2c4>)
 800767c:	4013      	ands	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6979      	ldr	r1, [r7, #20]
 8007684:	430b      	orrs	r3, r1
 8007686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	430a      	orrs	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a94      	ldr	r2, [pc, #592]	@ (8007918 <UART_SetConfig+0x2c8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d120      	bne.n	800770e <UART_SetConfig+0xbe>
 80076cc:	4b93      	ldr	r3, [pc, #588]	@ (800791c <UART_SetConfig+0x2cc>)
 80076ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d816      	bhi.n	8007708 <UART_SetConfig+0xb8>
 80076da:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <UART_SetConfig+0x90>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	080076fd 	.word	0x080076fd
 80076e8:	080076f7 	.word	0x080076f7
 80076ec:	08007703 	.word	0x08007703
 80076f0:	2301      	movs	r3, #1
 80076f2:	77fb      	strb	r3, [r7, #31]
 80076f4:	e150      	b.n	8007998 <UART_SetConfig+0x348>
 80076f6:	2302      	movs	r3, #2
 80076f8:	77fb      	strb	r3, [r7, #31]
 80076fa:	e14d      	b.n	8007998 <UART_SetConfig+0x348>
 80076fc:	2304      	movs	r3, #4
 80076fe:	77fb      	strb	r3, [r7, #31]
 8007700:	e14a      	b.n	8007998 <UART_SetConfig+0x348>
 8007702:	2308      	movs	r3, #8
 8007704:	77fb      	strb	r3, [r7, #31]
 8007706:	e147      	b.n	8007998 <UART_SetConfig+0x348>
 8007708:	2310      	movs	r3, #16
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e144      	b.n	8007998 <UART_SetConfig+0x348>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a83      	ldr	r2, [pc, #524]	@ (8007920 <UART_SetConfig+0x2d0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d132      	bne.n	800777e <UART_SetConfig+0x12e>
 8007718:	4b80      	ldr	r3, [pc, #512]	@ (800791c <UART_SetConfig+0x2cc>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	f003 030c 	and.w	r3, r3, #12
 8007722:	2b0c      	cmp	r3, #12
 8007724:	d828      	bhi.n	8007778 <UART_SetConfig+0x128>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <UART_SetConfig+0xdc>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007761 	.word	0x08007761
 8007730:	08007779 	.word	0x08007779
 8007734:	08007779 	.word	0x08007779
 8007738:	08007779 	.word	0x08007779
 800773c:	0800776d 	.word	0x0800776d
 8007740:	08007779 	.word	0x08007779
 8007744:	08007779 	.word	0x08007779
 8007748:	08007779 	.word	0x08007779
 800774c:	08007767 	.word	0x08007767
 8007750:	08007779 	.word	0x08007779
 8007754:	08007779 	.word	0x08007779
 8007758:	08007779 	.word	0x08007779
 800775c:	08007773 	.word	0x08007773
 8007760:	2300      	movs	r3, #0
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	e118      	b.n	8007998 <UART_SetConfig+0x348>
 8007766:	2302      	movs	r3, #2
 8007768:	77fb      	strb	r3, [r7, #31]
 800776a:	e115      	b.n	8007998 <UART_SetConfig+0x348>
 800776c:	2304      	movs	r3, #4
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e112      	b.n	8007998 <UART_SetConfig+0x348>
 8007772:	2308      	movs	r3, #8
 8007774:	77fb      	strb	r3, [r7, #31]
 8007776:	e10f      	b.n	8007998 <UART_SetConfig+0x348>
 8007778:	2310      	movs	r3, #16
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e10c      	b.n	8007998 <UART_SetConfig+0x348>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a68      	ldr	r2, [pc, #416]	@ (8007924 <UART_SetConfig+0x2d4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d120      	bne.n	80077ca <UART_SetConfig+0x17a>
 8007788:	4b64      	ldr	r3, [pc, #400]	@ (800791c <UART_SetConfig+0x2cc>)
 800778a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800778e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007792:	2b30      	cmp	r3, #48	@ 0x30
 8007794:	d013      	beq.n	80077be <UART_SetConfig+0x16e>
 8007796:	2b30      	cmp	r3, #48	@ 0x30
 8007798:	d814      	bhi.n	80077c4 <UART_SetConfig+0x174>
 800779a:	2b20      	cmp	r3, #32
 800779c:	d009      	beq.n	80077b2 <UART_SetConfig+0x162>
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d810      	bhi.n	80077c4 <UART_SetConfig+0x174>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <UART_SetConfig+0x15c>
 80077a6:	2b10      	cmp	r3, #16
 80077a8:	d006      	beq.n	80077b8 <UART_SetConfig+0x168>
 80077aa:	e00b      	b.n	80077c4 <UART_SetConfig+0x174>
 80077ac:	2300      	movs	r3, #0
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e0f2      	b.n	8007998 <UART_SetConfig+0x348>
 80077b2:	2302      	movs	r3, #2
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e0ef      	b.n	8007998 <UART_SetConfig+0x348>
 80077b8:	2304      	movs	r3, #4
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e0ec      	b.n	8007998 <UART_SetConfig+0x348>
 80077be:	2308      	movs	r3, #8
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e0e9      	b.n	8007998 <UART_SetConfig+0x348>
 80077c4:	2310      	movs	r3, #16
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e0e6      	b.n	8007998 <UART_SetConfig+0x348>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a56      	ldr	r2, [pc, #344]	@ (8007928 <UART_SetConfig+0x2d8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d120      	bne.n	8007816 <UART_SetConfig+0x1c6>
 80077d4:	4b51      	ldr	r3, [pc, #324]	@ (800791c <UART_SetConfig+0x2cc>)
 80077d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077de:	2bc0      	cmp	r3, #192	@ 0xc0
 80077e0:	d013      	beq.n	800780a <UART_SetConfig+0x1ba>
 80077e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80077e4:	d814      	bhi.n	8007810 <UART_SetConfig+0x1c0>
 80077e6:	2b80      	cmp	r3, #128	@ 0x80
 80077e8:	d009      	beq.n	80077fe <UART_SetConfig+0x1ae>
 80077ea:	2b80      	cmp	r3, #128	@ 0x80
 80077ec:	d810      	bhi.n	8007810 <UART_SetConfig+0x1c0>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <UART_SetConfig+0x1a8>
 80077f2:	2b40      	cmp	r3, #64	@ 0x40
 80077f4:	d006      	beq.n	8007804 <UART_SetConfig+0x1b4>
 80077f6:	e00b      	b.n	8007810 <UART_SetConfig+0x1c0>
 80077f8:	2300      	movs	r3, #0
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e0cc      	b.n	8007998 <UART_SetConfig+0x348>
 80077fe:	2302      	movs	r3, #2
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e0c9      	b.n	8007998 <UART_SetConfig+0x348>
 8007804:	2304      	movs	r3, #4
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e0c6      	b.n	8007998 <UART_SetConfig+0x348>
 800780a:	2308      	movs	r3, #8
 800780c:	77fb      	strb	r3, [r7, #31]
 800780e:	e0c3      	b.n	8007998 <UART_SetConfig+0x348>
 8007810:	2310      	movs	r3, #16
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e0c0      	b.n	8007998 <UART_SetConfig+0x348>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a44      	ldr	r2, [pc, #272]	@ (800792c <UART_SetConfig+0x2dc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d125      	bne.n	800786c <UART_SetConfig+0x21c>
 8007820:	4b3e      	ldr	r3, [pc, #248]	@ (800791c <UART_SetConfig+0x2cc>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800782a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800782e:	d017      	beq.n	8007860 <UART_SetConfig+0x210>
 8007830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007834:	d817      	bhi.n	8007866 <UART_SetConfig+0x216>
 8007836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800783a:	d00b      	beq.n	8007854 <UART_SetConfig+0x204>
 800783c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007840:	d811      	bhi.n	8007866 <UART_SetConfig+0x216>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <UART_SetConfig+0x1fe>
 8007846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784a:	d006      	beq.n	800785a <UART_SetConfig+0x20a>
 800784c:	e00b      	b.n	8007866 <UART_SetConfig+0x216>
 800784e:	2300      	movs	r3, #0
 8007850:	77fb      	strb	r3, [r7, #31]
 8007852:	e0a1      	b.n	8007998 <UART_SetConfig+0x348>
 8007854:	2302      	movs	r3, #2
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e09e      	b.n	8007998 <UART_SetConfig+0x348>
 800785a:	2304      	movs	r3, #4
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e09b      	b.n	8007998 <UART_SetConfig+0x348>
 8007860:	2308      	movs	r3, #8
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e098      	b.n	8007998 <UART_SetConfig+0x348>
 8007866:	2310      	movs	r3, #16
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e095      	b.n	8007998 <UART_SetConfig+0x348>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a2f      	ldr	r2, [pc, #188]	@ (8007930 <UART_SetConfig+0x2e0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d125      	bne.n	80078c2 <UART_SetConfig+0x272>
 8007876:	4b29      	ldr	r3, [pc, #164]	@ (800791c <UART_SetConfig+0x2cc>)
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007884:	d017      	beq.n	80078b6 <UART_SetConfig+0x266>
 8007886:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800788a:	d817      	bhi.n	80078bc <UART_SetConfig+0x26c>
 800788c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007890:	d00b      	beq.n	80078aa <UART_SetConfig+0x25a>
 8007892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007896:	d811      	bhi.n	80078bc <UART_SetConfig+0x26c>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <UART_SetConfig+0x254>
 800789c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a0:	d006      	beq.n	80078b0 <UART_SetConfig+0x260>
 80078a2:	e00b      	b.n	80078bc <UART_SetConfig+0x26c>
 80078a4:	2301      	movs	r3, #1
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e076      	b.n	8007998 <UART_SetConfig+0x348>
 80078aa:	2302      	movs	r3, #2
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e073      	b.n	8007998 <UART_SetConfig+0x348>
 80078b0:	2304      	movs	r3, #4
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e070      	b.n	8007998 <UART_SetConfig+0x348>
 80078b6:	2308      	movs	r3, #8
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e06d      	b.n	8007998 <UART_SetConfig+0x348>
 80078bc:	2310      	movs	r3, #16
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e06a      	b.n	8007998 <UART_SetConfig+0x348>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007934 <UART_SetConfig+0x2e4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d138      	bne.n	800793e <UART_SetConfig+0x2ee>
 80078cc:	4b13      	ldr	r3, [pc, #76]	@ (800791c <UART_SetConfig+0x2cc>)
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80078d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078da:	d017      	beq.n	800790c <UART_SetConfig+0x2bc>
 80078dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078e0:	d82a      	bhi.n	8007938 <UART_SetConfig+0x2e8>
 80078e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e6:	d00b      	beq.n	8007900 <UART_SetConfig+0x2b0>
 80078e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ec:	d824      	bhi.n	8007938 <UART_SetConfig+0x2e8>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <UART_SetConfig+0x2aa>
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f6:	d006      	beq.n	8007906 <UART_SetConfig+0x2b6>
 80078f8:	e01e      	b.n	8007938 <UART_SetConfig+0x2e8>
 80078fa:	2300      	movs	r3, #0
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e04b      	b.n	8007998 <UART_SetConfig+0x348>
 8007900:	2302      	movs	r3, #2
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e048      	b.n	8007998 <UART_SetConfig+0x348>
 8007906:	2304      	movs	r3, #4
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e045      	b.n	8007998 <UART_SetConfig+0x348>
 800790c:	2308      	movs	r3, #8
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e042      	b.n	8007998 <UART_SetConfig+0x348>
 8007912:	bf00      	nop
 8007914:	efff69f3 	.word	0xefff69f3
 8007918:	40011000 	.word	0x40011000
 800791c:	40023800 	.word	0x40023800
 8007920:	40004400 	.word	0x40004400
 8007924:	40004800 	.word	0x40004800
 8007928:	40004c00 	.word	0x40004c00
 800792c:	40005000 	.word	0x40005000
 8007930:	40011400 	.word	0x40011400
 8007934:	40007800 	.word	0x40007800
 8007938:	2310      	movs	r3, #16
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e02c      	b.n	8007998 <UART_SetConfig+0x348>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a72      	ldr	r2, [pc, #456]	@ (8007b0c <UART_SetConfig+0x4bc>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d125      	bne.n	8007994 <UART_SetConfig+0x344>
 8007948:	4b71      	ldr	r3, [pc, #452]	@ (8007b10 <UART_SetConfig+0x4c0>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007952:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007956:	d017      	beq.n	8007988 <UART_SetConfig+0x338>
 8007958:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800795c:	d817      	bhi.n	800798e <UART_SetConfig+0x33e>
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007962:	d00b      	beq.n	800797c <UART_SetConfig+0x32c>
 8007964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007968:	d811      	bhi.n	800798e <UART_SetConfig+0x33e>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <UART_SetConfig+0x326>
 800796e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007972:	d006      	beq.n	8007982 <UART_SetConfig+0x332>
 8007974:	e00b      	b.n	800798e <UART_SetConfig+0x33e>
 8007976:	2300      	movs	r3, #0
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e00d      	b.n	8007998 <UART_SetConfig+0x348>
 800797c:	2302      	movs	r3, #2
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e00a      	b.n	8007998 <UART_SetConfig+0x348>
 8007982:	2304      	movs	r3, #4
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e007      	b.n	8007998 <UART_SetConfig+0x348>
 8007988:	2308      	movs	r3, #8
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e004      	b.n	8007998 <UART_SetConfig+0x348>
 800798e:	2310      	movs	r3, #16
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e001      	b.n	8007998 <UART_SetConfig+0x348>
 8007994:	2310      	movs	r3, #16
 8007996:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a0:	d15b      	bne.n	8007a5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079a2:	7ffb      	ldrb	r3, [r7, #31]
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d828      	bhi.n	80079fa <UART_SetConfig+0x3aa>
 80079a8:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <UART_SetConfig+0x360>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	080079fb 	.word	0x080079fb
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	080079fb 	.word	0x080079fb
 80079c8:	080079fb 	.word	0x080079fb
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	080079f3 	.word	0x080079f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d4:	f7fd f9dc 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 80079d8:	61b8      	str	r0, [r7, #24]
        break;
 80079da:	e013      	b.n	8007a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079dc:	f7fd f9ec 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 80079e0:	61b8      	str	r0, [r7, #24]
        break;
 80079e2:	e00f      	b.n	8007a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007b14 <UART_SetConfig+0x4c4>)
 80079e6:	61bb      	str	r3, [r7, #24]
        break;
 80079e8:	e00c      	b.n	8007a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fd f8bf 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 80079ee:	61b8      	str	r0, [r7, #24]
        break;
 80079f0:	e008      	b.n	8007a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f6:	61bb      	str	r3, [r7, #24]
        break;
 80079f8:	e004      	b.n	8007a04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	77bb      	strb	r3, [r7, #30]
        break;
 8007a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d074      	beq.n	8007af4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	005a      	lsls	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b0f      	cmp	r3, #15
 8007a24:	d916      	bls.n	8007a54 <UART_SetConfig+0x404>
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2c:	d212      	bcs.n	8007a54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f023 030f 	bic.w	r3, r3, #15
 8007a36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	89fb      	ldrh	r3, [r7, #14]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	89fa      	ldrh	r2, [r7, #14]
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	e04f      	b.n	8007af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	77bb      	strb	r3, [r7, #30]
 8007a58:	e04c      	b.n	8007af4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a5a:	7ffb      	ldrb	r3, [r7, #31]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d828      	bhi.n	8007ab2 <UART_SetConfig+0x462>
 8007a60:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <UART_SetConfig+0x418>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	08007ab3 	.word	0x08007ab3
 8007a78:	08007aa3 	.word	0x08007aa3
 8007a7c:	08007ab3 	.word	0x08007ab3
 8007a80:	08007ab3 	.word	0x08007ab3
 8007a84:	08007ab3 	.word	0x08007ab3
 8007a88:	08007aab 	.word	0x08007aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a8c:	f7fd f980 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8007a90:	61b8      	str	r0, [r7, #24]
        break;
 8007a92:	e013      	b.n	8007abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a94:	f7fd f990 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 8007a98:	61b8      	str	r0, [r7, #24]
        break;
 8007a9a:	e00f      	b.n	8007abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b14 <UART_SetConfig+0x4c4>)
 8007a9e:	61bb      	str	r3, [r7, #24]
        break;
 8007aa0:	e00c      	b.n	8007abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aa2:	f7fd f863 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8007aa6:	61b8      	str	r0, [r7, #24]
        break;
 8007aa8:	e008      	b.n	8007abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aae:	61bb      	str	r3, [r7, #24]
        break;
 8007ab0:	e004      	b.n	8007abc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8007aba:	bf00      	nop
    }

    if (pclk != 0U)
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	085a      	lsrs	r2, r3, #1
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	441a      	add	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b0f      	cmp	r3, #15
 8007ada:	d909      	bls.n	8007af0 <UART_SetConfig+0x4a0>
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae2:	d205      	bcs.n	8007af0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	e001      	b.n	8007af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40007c00 	.word	0x40007c00
 8007b10:	40023800 	.word	0x40023800
 8007b14:	00f42400 	.word	0x00f42400

08007b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01a      	beq.n	8007c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c16:	d10a      	bne.n	8007c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08c      	sub	sp, #48	@ 0x30
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c6c:	f7fb fac0 	bl	80031f0 <HAL_GetTick>
 8007c70:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d12e      	bne.n	8007cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f83b 	bl	8007d0a <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d021      	beq.n	8007cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cae:	623b      	str	r3, [r7, #32]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	69b9      	ldr	r1, [r7, #24]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e6      	bne.n	8007c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e011      	b.n	8007d02 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3728      	adds	r7, #40	@ 0x28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d1a:	e04f      	b.n	8007dbc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d04b      	beq.n	8007dbc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d24:	f7fb fa64 	bl	80031f0 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d302      	bcc.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e04e      	b.n	8007ddc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d037      	beq.n	8007dbc <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b80      	cmp	r3, #128	@ 0x80
 8007d50:	d034      	beq.n	8007dbc <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d031      	beq.n	8007dbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d110      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f8fe 	bl	8007f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2208      	movs	r2, #8
 8007d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e029      	b.n	8007ddc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d96:	d111      	bne.n	8007dbc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007da0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 f8e4 	bl	8007f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e00f      	b.n	8007ddc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69da      	ldr	r2, [r3, #28]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	bf0c      	ite	eq
 8007dcc:	2301      	moveq	r3, #1
 8007dce:	2300      	movne	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d0a0      	beq.n	8007d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b097      	sub	sp, #92	@ 0x5c
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	88fa      	ldrh	r2, [r7, #6]
 8007dfc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e16:	d10e      	bne.n	8007e36 <UART_Start_Receive_IT+0x52>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d105      	bne.n	8007e2c <UART_Start_Receive_IT+0x48>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007e26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e2a:	e02d      	b.n	8007e88 <UART_Start_Receive_IT+0xa4>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	22ff      	movs	r2, #255	@ 0xff
 8007e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e34:	e028      	b.n	8007e88 <UART_Start_Receive_IT+0xa4>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10d      	bne.n	8007e5a <UART_Start_Receive_IT+0x76>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <UART_Start_Receive_IT+0x6c>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	22ff      	movs	r2, #255	@ 0xff
 8007e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e4e:	e01b      	b.n	8007e88 <UART_Start_Receive_IT+0xa4>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	227f      	movs	r2, #127	@ 0x7f
 8007e54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e58:	e016      	b.n	8007e88 <UART_Start_Receive_IT+0xa4>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e62:	d10d      	bne.n	8007e80 <UART_Start_Receive_IT+0x9c>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d104      	bne.n	8007e76 <UART_Start_Receive_IT+0x92>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	227f      	movs	r2, #127	@ 0x7f
 8007e70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e74:	e008      	b.n	8007e88 <UART_Start_Receive_IT+0xa4>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	223f      	movs	r2, #63	@ 0x3f
 8007e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e7e:	e003      	b.n	8007e88 <UART_Start_Receive_IT+0xa4>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2222      	movs	r2, #34	@ 0x22
 8007e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	f043 0301 	orr.w	r3, r3, #1
 8007eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007eb8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007eba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e5      	bne.n	8007e98 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed4:	d107      	bne.n	8007ee6 <UART_Start_Receive_IT+0x102>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	@ (8007f68 <UART_Start_Receive_IT+0x184>)
 8007ee2:	669a      	str	r2, [r3, #104]	@ 0x68
 8007ee4:	e002      	b.n	8007eec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a20      	ldr	r2, [pc, #128]	@ (8007f6c <UART_Start_Receive_IT+0x188>)
 8007eea:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d019      	beq.n	8007f28 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f14:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e6      	bne.n	8007ef4 <UART_Start_Receive_IT+0x110>
 8007f26:	e018      	b.n	8007f5a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	613b      	str	r3, [r7, #16]
   return(result);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f043 0320 	orr.w	r3, r3, #32
 8007f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f46:	623b      	str	r3, [r7, #32]
 8007f48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	69f9      	ldr	r1, [r7, #28]
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e6      	bne.n	8007f28 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	375c      	adds	r7, #92	@ 0x5c
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	08008261 	.word	0x08008261
 8007f6c:	080080b9 	.word	0x080080b9

08007f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b095      	sub	sp, #84	@ 0x54
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e6      	bne.n	8007f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
 8007fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e5      	bne.n	8007faa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d118      	bne.n	8008018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 0310 	bic.w	r3, r3, #16
 8007ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6979      	ldr	r1, [r7, #20]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	613b      	str	r3, [r7, #16]
   return(result);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800802c:	bf00      	nop
 800802e:	3754      	adds	r7, #84	@ 0x54
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f7ff fae4 	bl	8007624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60bb      	str	r3, [r7, #8]
   return(result);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6979      	ldr	r1, [r7, #20]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	613b      	str	r3, [r7, #16]
   return(result);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fab0 	bl	8007610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b0:	bf00      	nop
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b09c      	sub	sp, #112	@ 0x70
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d0:	2b22      	cmp	r3, #34	@ 0x22
 80080d2:	f040 80b9 	bne.w	8008248 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080e4:	b2d9      	uxtb	r1, r3
 80080e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f0:	400a      	ands	r2, r1
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 809c 	bne.w	8008258 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800812e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800813e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008140:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800814c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e6      	bne.n	8008120 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3308      	adds	r3, #8
 8008158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	667b      	str	r3, [r7, #100]	@ 0x64
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008172:	647a      	str	r2, [r7, #68]	@ 0x44
 8008174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e5      	bne.n	8008152 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d018      	beq.n	80081da <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	623b      	str	r3, [r7, #32]
   return(result);
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e6      	bne.n	80081a8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d12e      	bne.n	8008240 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f023 0310 	bic.w	r3, r3, #16
 80081fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	617b      	str	r3, [r7, #20]
   return(result);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e6      	bne.n	80081e8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b10      	cmp	r3, #16
 8008226:	d103      	bne.n	8008230 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2210      	movs	r2, #16
 800822e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff f9fd 	bl	8007638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800823e:	e00b      	b.n	8008258 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fa f993 	bl	800256c <HAL_UART_RxCpltCallback>
}
 8008246:	e007      	b.n	8008258 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0208 	orr.w	r2, r2, #8
 8008256:	619a      	str	r2, [r3, #24]
}
 8008258:	bf00      	nop
 800825a:	3770      	adds	r7, #112	@ 0x70
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b09c      	sub	sp, #112	@ 0x70
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800826e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008278:	2b22      	cmp	r3, #34	@ 0x22
 800827a:	f040 80b9 	bne.w	80083f0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008284:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800828e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008292:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008296:	4013      	ands	r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800829c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a2:	1c9a      	adds	r2, r3, #2
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f040 809c 	bne.w	8008400 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80082d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80082e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80082f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e6      	bne.n	80082c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	f023 0301 	bic.w	r3, r3, #1
 8008310:	663b      	str	r3, [r7, #96]	@ 0x60
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800831a:	643a      	str	r2, [r7, #64]	@ 0x40
 800831c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d018      	beq.n	8008382 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	61fb      	str	r3, [r7, #28]
   return(result);
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800836e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008370:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e6      	bne.n	8008350 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008386:	2b01      	cmp	r3, #1
 8008388:	d12e      	bne.n	80083e8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	60bb      	str	r3, [r7, #8]
   return(result);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f023 0310 	bic.w	r3, r3, #16
 80083a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6979      	ldr	r1, [r7, #20]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	613b      	str	r3, [r7, #16]
   return(result);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e6      	bne.n	8008390 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d103      	bne.n	80083d8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2210      	movs	r2, #16
 80083d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff f929 	bl	8007638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083e6:	e00b      	b.n	8008400 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7fa f8bf 	bl	800256c <HAL_UART_RxCpltCallback>
}
 80083ee:	e007      	b.n	8008400 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0208 	orr.w	r2, r2, #8
 80083fe:	619a      	str	r2, [r3, #24]
}
 8008400:	bf00      	nop
 8008402:	3770      	adds	r7, #112	@ 0x70
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008408:	b084      	sub	sp, #16
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	f107 001c 	add.w	r0, r7, #28
 8008416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800841a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800841e:	2b01      	cmp	r3, #1
 8008420:	d121      	bne.n	8008466 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008426:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	4b21      	ldr	r3, [pc, #132]	@ (80084b8 <USB_CoreInit+0xb0>)
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800844a:	2b01      	cmp	r3, #1
 800844c:	d105      	bne.n	800845a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa92 	bl	8008984 <USB_CoreReset>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
 8008464:	e010      	b.n	8008488 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa86 	bl	8008984 <USB_CoreReset>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008488:	7fbb      	ldrb	r3, [r7, #30]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d10b      	bne.n	80084a6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f043 0206 	orr.w	r2, r3, #6
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f043 0220 	orr.w	r2, r3, #32
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b2:	b004      	add	sp, #16
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	ffbdffbf 	.word	0xffbdffbf

080084bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f023 0201 	bic.w	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d115      	bne.n	800852c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800850c:	200a      	movs	r0, #10
 800850e:	f7fa fe7b 	bl	8003208 <HAL_Delay>
      ms += 10U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	330a      	adds	r3, #10
 8008516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa25 	bl	8008968 <USB_GetMode>
 800851e:	4603      	mov	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d01e      	beq.n	8008562 <USB_SetCurrentMode+0x84>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2bc7      	cmp	r3, #199	@ 0xc7
 8008528:	d9f0      	bls.n	800850c <USB_SetCurrentMode+0x2e>
 800852a:	e01a      	b.n	8008562 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d115      	bne.n	800855e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800853e:	200a      	movs	r0, #10
 8008540:	f7fa fe62 	bl	8003208 <HAL_Delay>
      ms += 10U;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	330a      	adds	r3, #10
 8008548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa0c 	bl	8008968 <USB_GetMode>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <USB_SetCurrentMode+0x84>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2bc7      	cmp	r3, #199	@ 0xc7
 800855a:	d9f0      	bls.n	800853e <USB_SetCurrentMode+0x60>
 800855c:	e001      	b.n	8008562 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e005      	b.n	800856e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2bc8      	cmp	r3, #200	@ 0xc8
 8008566:	d101      	bne.n	800856c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008578:	b084      	sub	sp, #16
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	e009      	b.n	80085ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3340      	adds	r3, #64	@ 0x40
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	2200      	movs	r2, #0
 80085a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b0e      	cmp	r3, #14
 80085b0:	d9f2      	bls.n	8008598 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11c      	bne.n	80085f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085c8:	f043 0302 	orr.w	r3, r3, #2
 80085cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e005      	b.n	8008600 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008606:	461a      	mov	r2, r3
 8008608:	2300      	movs	r3, #0
 800860a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800860c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008610:	2b01      	cmp	r3, #1
 8008612:	d10d      	bne.n	8008630 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800861c:	2100      	movs	r1, #0
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f968 	bl	80088f4 <USB_SetDevSpeed>
 8008624:	e008      	b.n	8008638 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008626:	2101      	movs	r1, #1
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f963 	bl	80088f4 <USB_SetDevSpeed>
 800862e:	e003      	b.n	8008638 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008630:	2103      	movs	r1, #3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f95e 	bl	80088f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008638:	2110      	movs	r1, #16
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f8fa 	bl	8008834 <USB_FlushTxFifo>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f924 	bl	8008898 <USB_FlushRxFifo>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008660:	461a      	mov	r2, r3
 8008662:	2300      	movs	r3, #0
 8008664:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866c:	461a      	mov	r2, r3
 800866e:	2300      	movs	r3, #0
 8008670:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008678:	461a      	mov	r2, r3
 800867a:	2300      	movs	r3, #0
 800867c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800867e:	2300      	movs	r3, #0
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	e043      	b.n	800870c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800869a:	d118      	bne.n	80086ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ae:	461a      	mov	r2, r3
 80086b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	e013      	b.n	80086e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c4:	461a      	mov	r2, r3
 80086c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e008      	b.n	80086e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086da:	461a      	mov	r2, r3
 80086dc:	2300      	movs	r3, #0
 80086de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ec:	461a      	mov	r2, r3
 80086ee:	2300      	movs	r3, #0
 80086f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086fe:	461a      	mov	r2, r3
 8008700:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008704:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3301      	adds	r3, #1
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008710:	461a      	mov	r2, r3
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4293      	cmp	r3, r2
 8008716:	d3b5      	bcc.n	8008684 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008718:	2300      	movs	r3, #0
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	e043      	b.n	80087a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008734:	d118      	bne.n	8008768 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008748:	461a      	mov	r2, r3
 800874a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	e013      	b.n	800877a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800875e:	461a      	mov	r2, r3
 8008760:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	e008      	b.n	800877a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	2300      	movs	r3, #0
 8008778:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008786:	461a      	mov	r2, r3
 8008788:	2300      	movs	r3, #0
 800878a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008798:	461a      	mov	r2, r3
 800879a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800879e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	3301      	adds	r3, #1
 80087a4:	613b      	str	r3, [r7, #16]
 80087a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087aa:	461a      	mov	r2, r3
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d3b5      	bcc.n	800871e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80087d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	f043 0210 	orr.w	r2, r3, #16
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699a      	ldr	r2, [r3, #24]
 80087ec:	4b0f      	ldr	r3, [pc, #60]	@ (800882c <USB_DevInit+0x2b4>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f043 0208 	orr.w	r2, r3, #8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800880c:	2b01      	cmp	r3, #1
 800880e:	d105      	bne.n	800881c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	4b06      	ldr	r3, [pc, #24]	@ (8008830 <USB_DevInit+0x2b8>)
 8008816:	4313      	orrs	r3, r2
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008828:	b004      	add	sp, #16
 800882a:	4770      	bx	lr
 800882c:	803c3800 	.word	0x803c3800
 8008830:	40000004 	.word	0x40000004

08008834 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800884e:	d901      	bls.n	8008854 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e01b      	b.n	800888c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	daf2      	bge.n	8008842 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	019b      	lsls	r3, r3, #6
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008878:	d901      	bls.n	800887e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e006      	b.n	800888c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b20      	cmp	r3, #32
 8008888:	d0f0      	beq.n	800886c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088b0:	d901      	bls.n	80088b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e018      	b.n	80088e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	daf2      	bge.n	80088a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2210      	movs	r2, #16
 80088c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088d4:	d901      	bls.n	80088da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e006      	b.n	80088e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d0f0      	beq.n	80088c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008914:	4313      	orrs	r3, r2
 8008916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008940:	f023 0303 	bic.w	r3, r3, #3
 8008944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008954:	f043 0302 	orr.w	r3, r3, #2
 8008958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	f003 0301 	and.w	r3, r3, #1
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800899c:	d901      	bls.n	80089a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e01b      	b.n	80089da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	daf2      	bge.n	8008990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f043 0201 	orr.w	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3301      	adds	r3, #1
 80089be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089c6:	d901      	bls.n	80089cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e006      	b.n	80089da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d0f0      	beq.n	80089ba <USB_CoreReset+0x36>

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <_strtol_l.constprop.0>:
 80089e8:	2b24      	cmp	r3, #36	@ 0x24
 80089ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ee:	4686      	mov	lr, r0
 80089f0:	4690      	mov	r8, r2
 80089f2:	d801      	bhi.n	80089f8 <_strtol_l.constprop.0+0x10>
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d106      	bne.n	8008a06 <_strtol_l.constprop.0+0x1e>
 80089f8:	f000 f8a2 	bl	8008b40 <__errno>
 80089fc:	2316      	movs	r3, #22
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	2000      	movs	r0, #0
 8008a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a06:	4834      	ldr	r0, [pc, #208]	@ (8008ad8 <_strtol_l.constprop.0+0xf0>)
 8008a08:	460d      	mov	r5, r1
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a10:	5d06      	ldrb	r6, [r0, r4]
 8008a12:	f016 0608 	ands.w	r6, r6, #8
 8008a16:	d1f8      	bne.n	8008a0a <_strtol_l.constprop.0+0x22>
 8008a18:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a1a:	d12d      	bne.n	8008a78 <_strtol_l.constprop.0+0x90>
 8008a1c:	782c      	ldrb	r4, [r5, #0]
 8008a1e:	2601      	movs	r6, #1
 8008a20:	1c95      	adds	r5, r2, #2
 8008a22:	f033 0210 	bics.w	r2, r3, #16
 8008a26:	d109      	bne.n	8008a3c <_strtol_l.constprop.0+0x54>
 8008a28:	2c30      	cmp	r4, #48	@ 0x30
 8008a2a:	d12a      	bne.n	8008a82 <_strtol_l.constprop.0+0x9a>
 8008a2c:	782a      	ldrb	r2, [r5, #0]
 8008a2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a32:	2a58      	cmp	r2, #88	@ 0x58
 8008a34:	d125      	bne.n	8008a82 <_strtol_l.constprop.0+0x9a>
 8008a36:	786c      	ldrb	r4, [r5, #1]
 8008a38:	2310      	movs	r3, #16
 8008a3a:	3502      	adds	r5, #2
 8008a3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a44:	2200      	movs	r2, #0
 8008a46:	fbbc f9f3 	udiv	r9, ip, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a54:	2f09      	cmp	r7, #9
 8008a56:	d81b      	bhi.n	8008a90 <_strtol_l.constprop.0+0xa8>
 8008a58:	463c      	mov	r4, r7
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	dd27      	ble.n	8008aae <_strtol_l.constprop.0+0xc6>
 8008a5e:	1c57      	adds	r7, r2, #1
 8008a60:	d007      	beq.n	8008a72 <_strtol_l.constprop.0+0x8a>
 8008a62:	4581      	cmp	r9, r0
 8008a64:	d320      	bcc.n	8008aa8 <_strtol_l.constprop.0+0xc0>
 8008a66:	d101      	bne.n	8008a6c <_strtol_l.constprop.0+0x84>
 8008a68:	45a2      	cmp	sl, r4
 8008a6a:	db1d      	blt.n	8008aa8 <_strtol_l.constprop.0+0xc0>
 8008a6c:	fb00 4003 	mla	r0, r0, r3, r4
 8008a70:	2201      	movs	r2, #1
 8008a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a76:	e7eb      	b.n	8008a50 <_strtol_l.constprop.0+0x68>
 8008a78:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a7a:	bf04      	itt	eq
 8008a7c:	782c      	ldrbeq	r4, [r5, #0]
 8008a7e:	1c95      	addeq	r5, r2, #2
 8008a80:	e7cf      	b.n	8008a22 <_strtol_l.constprop.0+0x3a>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1da      	bne.n	8008a3c <_strtol_l.constprop.0+0x54>
 8008a86:	2c30      	cmp	r4, #48	@ 0x30
 8008a88:	bf0c      	ite	eq
 8008a8a:	2308      	moveq	r3, #8
 8008a8c:	230a      	movne	r3, #10
 8008a8e:	e7d5      	b.n	8008a3c <_strtol_l.constprop.0+0x54>
 8008a90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a94:	2f19      	cmp	r7, #25
 8008a96:	d801      	bhi.n	8008a9c <_strtol_l.constprop.0+0xb4>
 8008a98:	3c37      	subs	r4, #55	@ 0x37
 8008a9a:	e7de      	b.n	8008a5a <_strtol_l.constprop.0+0x72>
 8008a9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008aa0:	2f19      	cmp	r7, #25
 8008aa2:	d804      	bhi.n	8008aae <_strtol_l.constprop.0+0xc6>
 8008aa4:	3c57      	subs	r4, #87	@ 0x57
 8008aa6:	e7d8      	b.n	8008a5a <_strtol_l.constprop.0+0x72>
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aac:	e7e1      	b.n	8008a72 <_strtol_l.constprop.0+0x8a>
 8008aae:	1c53      	adds	r3, r2, #1
 8008ab0:	d108      	bne.n	8008ac4 <_strtol_l.constprop.0+0xdc>
 8008ab2:	2322      	movs	r3, #34	@ 0x22
 8008ab4:	f8ce 3000 	str.w	r3, [lr]
 8008ab8:	4660      	mov	r0, ip
 8008aba:	f1b8 0f00 	cmp.w	r8, #0
 8008abe:	d0a0      	beq.n	8008a02 <_strtol_l.constprop.0+0x1a>
 8008ac0:	1e69      	subs	r1, r5, #1
 8008ac2:	e006      	b.n	8008ad2 <_strtol_l.constprop.0+0xea>
 8008ac4:	b106      	cbz	r6, 8008ac8 <_strtol_l.constprop.0+0xe0>
 8008ac6:	4240      	negs	r0, r0
 8008ac8:	f1b8 0f00 	cmp.w	r8, #0
 8008acc:	d099      	beq.n	8008a02 <_strtol_l.constprop.0+0x1a>
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	d1f6      	bne.n	8008ac0 <_strtol_l.constprop.0+0xd8>
 8008ad2:	f8c8 1000 	str.w	r1, [r8]
 8008ad6:	e794      	b.n	8008a02 <_strtol_l.constprop.0+0x1a>
 8008ad8:	080094f5 	.word	0x080094f5

08008adc <strtol>:
 8008adc:	4613      	mov	r3, r2
 8008ade:	460a      	mov	r2, r1
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	4802      	ldr	r0, [pc, #8]	@ (8008aec <strtol+0x10>)
 8008ae4:	6800      	ldr	r0, [r0, #0]
 8008ae6:	f7ff bf7f 	b.w	80089e8 <_strtol_l.constprop.0>
 8008aea:	bf00      	nop
 8008aec:	20000068 	.word	0x20000068

08008af0 <siprintf>:
 8008af0:	b40e      	push	{r1, r2, r3}
 8008af2:	b500      	push	{lr}
 8008af4:	b09c      	sub	sp, #112	@ 0x70
 8008af6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008af8:	9002      	str	r0, [sp, #8]
 8008afa:	9006      	str	r0, [sp, #24]
 8008afc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b00:	4809      	ldr	r0, [pc, #36]	@ (8008b28 <siprintf+0x38>)
 8008b02:	9107      	str	r1, [sp, #28]
 8008b04:	9104      	str	r1, [sp, #16]
 8008b06:	4909      	ldr	r1, [pc, #36]	@ (8008b2c <siprintf+0x3c>)
 8008b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0c:	9105      	str	r1, [sp, #20]
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	a902      	add	r1, sp, #8
 8008b14:	f000 f994 	bl	8008e40 <_svfiprintf_r>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	b01c      	add	sp, #112	@ 0x70
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	b003      	add	sp, #12
 8008b26:	4770      	bx	lr
 8008b28:	20000068 	.word	0x20000068
 8008b2c:	ffff0208 	.word	0xffff0208

08008b30 <memset>:
 8008b30:	4402      	add	r2, r0
 8008b32:	4603      	mov	r3, r0
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d100      	bne.n	8008b3a <memset+0xa>
 8008b38:	4770      	bx	lr
 8008b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3e:	e7f9      	b.n	8008b34 <memset+0x4>

08008b40 <__errno>:
 8008b40:	4b01      	ldr	r3, [pc, #4]	@ (8008b48 <__errno+0x8>)
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	20000068 	.word	0x20000068

08008b4c <__libc_init_array>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b84 <__libc_init_array+0x38>)
 8008b50:	4c0d      	ldr	r4, [pc, #52]	@ (8008b88 <__libc_init_array+0x3c>)
 8008b52:	1b64      	subs	r4, r4, r5
 8008b54:	10a4      	asrs	r4, r4, #2
 8008b56:	2600      	movs	r6, #0
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	d109      	bne.n	8008b70 <__libc_init_array+0x24>
 8008b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b8c <__libc_init_array+0x40>)
 8008b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b90 <__libc_init_array+0x44>)
 8008b60:	f000 fc66 	bl	8009430 <_init>
 8008b64:	1b64      	subs	r4, r4, r5
 8008b66:	10a4      	asrs	r4, r4, #2
 8008b68:	2600      	movs	r6, #0
 8008b6a:	42a6      	cmp	r6, r4
 8008b6c:	d105      	bne.n	8008b7a <__libc_init_array+0x2e>
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b74:	4798      	blx	r3
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7ee      	b.n	8008b58 <__libc_init_array+0xc>
 8008b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7e:	4798      	blx	r3
 8008b80:	3601      	adds	r6, #1
 8008b82:	e7f2      	b.n	8008b6a <__libc_init_array+0x1e>
 8008b84:	08009630 	.word	0x08009630
 8008b88:	08009630 	.word	0x08009630
 8008b8c:	08009630 	.word	0x08009630
 8008b90:	08009634 	.word	0x08009634

08008b94 <__retarget_lock_acquire_recursive>:
 8008b94:	4770      	bx	lr

08008b96 <__retarget_lock_release_recursive>:
 8008b96:	4770      	bx	lr

08008b98 <_free_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d041      	beq.n	8008c24 <_free_r+0x8c>
 8008ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba4:	1f0c      	subs	r4, r1, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	18e4      	addlt	r4, r4, r3
 8008bac:	f000 f8e0 	bl	8008d70 <__malloc_lock>
 8008bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c28 <_free_r+0x90>)
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_free_r+0x2c>
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	4628      	mov	r0, r5
 8008bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc0:	f000 b8dc 	b.w	8008d7c <__malloc_unlock>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d908      	bls.n	8008bda <_free_r+0x42>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	1821      	adds	r1, r4, r0
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf01      	itttt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	1809      	addeq	r1, r1, r0
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	e7ed      	b.n	8008bb6 <_free_r+0x1e>
 8008bda:	461a      	mov	r2, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b10b      	cbz	r3, 8008be4 <_free_r+0x4c>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d9fa      	bls.n	8008bda <_free_r+0x42>
 8008be4:	6811      	ldr	r1, [r2, #0]
 8008be6:	1850      	adds	r0, r2, r1
 8008be8:	42a0      	cmp	r0, r4
 8008bea:	d10b      	bne.n	8008c04 <_free_r+0x6c>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	4401      	add	r1, r0
 8008bf0:	1850      	adds	r0, r2, r1
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	d1e0      	bne.n	8008bba <_free_r+0x22>
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	6053      	str	r3, [r2, #4]
 8008bfe:	4408      	add	r0, r1
 8008c00:	6010      	str	r0, [r2, #0]
 8008c02:	e7da      	b.n	8008bba <_free_r+0x22>
 8008c04:	d902      	bls.n	8008c0c <_free_r+0x74>
 8008c06:	230c      	movs	r3, #12
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	e7d6      	b.n	8008bba <_free_r+0x22>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	1821      	adds	r1, r4, r0
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf04      	itt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	bf04      	itt	eq
 8008c1c:	1809      	addeq	r1, r1, r0
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	6054      	str	r4, [r2, #4]
 8008c22:	e7ca      	b.n	8008bba <_free_r+0x22>
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	20000d10 	.word	0x20000d10

08008c2c <sbrk_aligned>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c6c <sbrk_aligned+0x40>)
 8008c30:	460c      	mov	r4, r1
 8008c32:	6831      	ldr	r1, [r6, #0]
 8008c34:	4605      	mov	r5, r0
 8008c36:	b911      	cbnz	r1, 8008c3e <sbrk_aligned+0x12>
 8008c38:	f000 fba6 	bl	8009388 <_sbrk_r>
 8008c3c:	6030      	str	r0, [r6, #0]
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4628      	mov	r0, r5
 8008c42:	f000 fba1 	bl	8009388 <_sbrk_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d103      	bne.n	8008c52 <sbrk_aligned+0x26>
 8008c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c4e:	4620      	mov	r0, r4
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	1cc4      	adds	r4, r0, #3
 8008c54:	f024 0403 	bic.w	r4, r4, #3
 8008c58:	42a0      	cmp	r0, r4
 8008c5a:	d0f8      	beq.n	8008c4e <sbrk_aligned+0x22>
 8008c5c:	1a21      	subs	r1, r4, r0
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f000 fb92 	bl	8009388 <_sbrk_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d1f2      	bne.n	8008c4e <sbrk_aligned+0x22>
 8008c68:	e7ef      	b.n	8008c4a <sbrk_aligned+0x1e>
 8008c6a:	bf00      	nop
 8008c6c:	20000d0c 	.word	0x20000d0c

08008c70 <_malloc_r>:
 8008c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c74:	1ccd      	adds	r5, r1, #3
 8008c76:	f025 0503 	bic.w	r5, r5, #3
 8008c7a:	3508      	adds	r5, #8
 8008c7c:	2d0c      	cmp	r5, #12
 8008c7e:	bf38      	it	cc
 8008c80:	250c      	movcc	r5, #12
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	4606      	mov	r6, r0
 8008c86:	db01      	blt.n	8008c8c <_malloc_r+0x1c>
 8008c88:	42a9      	cmp	r1, r5
 8008c8a:	d904      	bls.n	8008c96 <_malloc_r+0x26>
 8008c8c:	230c      	movs	r3, #12
 8008c8e:	6033      	str	r3, [r6, #0]
 8008c90:	2000      	movs	r0, #0
 8008c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d6c <_malloc_r+0xfc>
 8008c9a:	f000 f869 	bl	8008d70 <__malloc_lock>
 8008c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ca2:	461c      	mov	r4, r3
 8008ca4:	bb44      	cbnz	r4, 8008cf8 <_malloc_r+0x88>
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff ffbf 	bl	8008c2c <sbrk_aligned>
 8008cae:	1c43      	adds	r3, r0, #1
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	d158      	bne.n	8008d66 <_malloc_r+0xf6>
 8008cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8008cb8:	4627      	mov	r7, r4
 8008cba:	2f00      	cmp	r7, #0
 8008cbc:	d143      	bne.n	8008d46 <_malloc_r+0xd6>
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	d04b      	beq.n	8008d5a <_malloc_r+0xea>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	eb04 0903 	add.w	r9, r4, r3
 8008ccc:	f000 fb5c 	bl	8009388 <_sbrk_r>
 8008cd0:	4581      	cmp	r9, r0
 8008cd2:	d142      	bne.n	8008d5a <_malloc_r+0xea>
 8008cd4:	6821      	ldr	r1, [r4, #0]
 8008cd6:	1a6d      	subs	r5, r5, r1
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ffa6 	bl	8008c2c <sbrk_aligned>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d03a      	beq.n	8008d5a <_malloc_r+0xea>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	442b      	add	r3, r5
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	f8d8 3000 	ldr.w	r3, [r8]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	bb62      	cbnz	r2, 8008d4c <_malloc_r+0xdc>
 8008cf2:	f8c8 7000 	str.w	r7, [r8]
 8008cf6:	e00f      	b.n	8008d18 <_malloc_r+0xa8>
 8008cf8:	6822      	ldr	r2, [r4, #0]
 8008cfa:	1b52      	subs	r2, r2, r5
 8008cfc:	d420      	bmi.n	8008d40 <_malloc_r+0xd0>
 8008cfe:	2a0b      	cmp	r2, #11
 8008d00:	d917      	bls.n	8008d32 <_malloc_r+0xc2>
 8008d02:	1961      	adds	r1, r4, r5
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	6025      	str	r5, [r4, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	6059      	strne	r1, [r3, #4]
 8008d0c:	6863      	ldr	r3, [r4, #4]
 8008d0e:	bf08      	it	eq
 8008d10:	f8c8 1000 	streq.w	r1, [r8]
 8008d14:	5162      	str	r2, [r4, r5]
 8008d16:	604b      	str	r3, [r1, #4]
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f000 f82f 	bl	8008d7c <__malloc_unlock>
 8008d1e:	f104 000b 	add.w	r0, r4, #11
 8008d22:	1d23      	adds	r3, r4, #4
 8008d24:	f020 0007 	bic.w	r0, r0, #7
 8008d28:	1ac2      	subs	r2, r0, r3
 8008d2a:	bf1c      	itt	ne
 8008d2c:	1a1b      	subne	r3, r3, r0
 8008d2e:	50a3      	strne	r3, [r4, r2]
 8008d30:	e7af      	b.n	8008c92 <_malloc_r+0x22>
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	bf0c      	ite	eq
 8008d38:	f8c8 2000 	streq.w	r2, [r8]
 8008d3c:	605a      	strne	r2, [r3, #4]
 8008d3e:	e7eb      	b.n	8008d18 <_malloc_r+0xa8>
 8008d40:	4623      	mov	r3, r4
 8008d42:	6864      	ldr	r4, [r4, #4]
 8008d44:	e7ae      	b.n	8008ca4 <_malloc_r+0x34>
 8008d46:	463c      	mov	r4, r7
 8008d48:	687f      	ldr	r7, [r7, #4]
 8008d4a:	e7b6      	b.n	8008cba <_malloc_r+0x4a>
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d1fb      	bne.n	8008d4c <_malloc_r+0xdc>
 8008d54:	2300      	movs	r3, #0
 8008d56:	6053      	str	r3, [r2, #4]
 8008d58:	e7de      	b.n	8008d18 <_malloc_r+0xa8>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	6033      	str	r3, [r6, #0]
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 f80c 	bl	8008d7c <__malloc_unlock>
 8008d64:	e794      	b.n	8008c90 <_malloc_r+0x20>
 8008d66:	6005      	str	r5, [r0, #0]
 8008d68:	e7d6      	b.n	8008d18 <_malloc_r+0xa8>
 8008d6a:	bf00      	nop
 8008d6c:	20000d10 	.word	0x20000d10

08008d70 <__malloc_lock>:
 8008d70:	4801      	ldr	r0, [pc, #4]	@ (8008d78 <__malloc_lock+0x8>)
 8008d72:	f7ff bf0f 	b.w	8008b94 <__retarget_lock_acquire_recursive>
 8008d76:	bf00      	nop
 8008d78:	20000d08 	.word	0x20000d08

08008d7c <__malloc_unlock>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	@ (8008d84 <__malloc_unlock+0x8>)
 8008d7e:	f7ff bf0a 	b.w	8008b96 <__retarget_lock_release_recursive>
 8008d82:	bf00      	nop
 8008d84:	20000d08 	.word	0x20000d08

08008d88 <__ssputs_r>:
 8008d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	688e      	ldr	r6, [r1, #8]
 8008d8e:	461f      	mov	r7, r3
 8008d90:	42be      	cmp	r6, r7
 8008d92:	680b      	ldr	r3, [r1, #0]
 8008d94:	4682      	mov	sl, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	4690      	mov	r8, r2
 8008d9a:	d82d      	bhi.n	8008df8 <__ssputs_r+0x70>
 8008d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008da4:	d026      	beq.n	8008df4 <__ssputs_r+0x6c>
 8008da6:	6965      	ldr	r5, [r4, #20]
 8008da8:	6909      	ldr	r1, [r1, #16]
 8008daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dae:	eba3 0901 	sub.w	r9, r3, r1
 8008db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008db6:	1c7b      	adds	r3, r7, #1
 8008db8:	444b      	add	r3, r9
 8008dba:	106d      	asrs	r5, r5, #1
 8008dbc:	429d      	cmp	r5, r3
 8008dbe:	bf38      	it	cc
 8008dc0:	461d      	movcc	r5, r3
 8008dc2:	0553      	lsls	r3, r2, #21
 8008dc4:	d527      	bpl.n	8008e16 <__ssputs_r+0x8e>
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7ff ff52 	bl	8008c70 <_malloc_r>
 8008dcc:	4606      	mov	r6, r0
 8008dce:	b360      	cbz	r0, 8008e2a <__ssputs_r+0xa2>
 8008dd0:	6921      	ldr	r1, [r4, #16]
 8008dd2:	464a      	mov	r2, r9
 8008dd4:	f000 fae8 	bl	80093a8 <memcpy>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	6126      	str	r6, [r4, #16]
 8008de6:	6165      	str	r5, [r4, #20]
 8008de8:	444e      	add	r6, r9
 8008dea:	eba5 0509 	sub.w	r5, r5, r9
 8008dee:	6026      	str	r6, [r4, #0]
 8008df0:	60a5      	str	r5, [r4, #8]
 8008df2:	463e      	mov	r6, r7
 8008df4:	42be      	cmp	r6, r7
 8008df6:	d900      	bls.n	8008dfa <__ssputs_r+0x72>
 8008df8:	463e      	mov	r6, r7
 8008dfa:	6820      	ldr	r0, [r4, #0]
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	4641      	mov	r1, r8
 8008e00:	f000 faa8 	bl	8009354 <memmove>
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	1b9b      	subs	r3, r3, r6
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	4433      	add	r3, r6
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	2000      	movs	r0, #0
 8008e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e16:	462a      	mov	r2, r5
 8008e18:	f000 fad4 	bl	80093c4 <_realloc_r>
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d1e0      	bne.n	8008de4 <__ssputs_r+0x5c>
 8008e22:	6921      	ldr	r1, [r4, #16]
 8008e24:	4650      	mov	r0, sl
 8008e26:	f7ff feb7 	bl	8008b98 <_free_r>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	f8ca 3000 	str.w	r3, [sl]
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e36:	81a3      	strh	r3, [r4, #12]
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	e7e9      	b.n	8008e12 <__ssputs_r+0x8a>
	...

08008e40 <_svfiprintf_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	4698      	mov	r8, r3
 8008e46:	898b      	ldrh	r3, [r1, #12]
 8008e48:	061b      	lsls	r3, r3, #24
 8008e4a:	b09d      	sub	sp, #116	@ 0x74
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	4614      	mov	r4, r2
 8008e52:	d510      	bpl.n	8008e76 <_svfiprintf_r+0x36>
 8008e54:	690b      	ldr	r3, [r1, #16]
 8008e56:	b973      	cbnz	r3, 8008e76 <_svfiprintf_r+0x36>
 8008e58:	2140      	movs	r1, #64	@ 0x40
 8008e5a:	f7ff ff09 	bl	8008c70 <_malloc_r>
 8008e5e:	6028      	str	r0, [r5, #0]
 8008e60:	6128      	str	r0, [r5, #16]
 8008e62:	b930      	cbnz	r0, 8008e72 <_svfiprintf_r+0x32>
 8008e64:	230c      	movs	r3, #12
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	b01d      	add	sp, #116	@ 0x74
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	2340      	movs	r3, #64	@ 0x40
 8008e74:	616b      	str	r3, [r5, #20]
 8008e76:	2300      	movs	r3, #0
 8008e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e7a:	2320      	movs	r3, #32
 8008e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e84:	2330      	movs	r3, #48	@ 0x30
 8008e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009024 <_svfiprintf_r+0x1e4>
 8008e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e8e:	f04f 0901 	mov.w	r9, #1
 8008e92:	4623      	mov	r3, r4
 8008e94:	469a      	mov	sl, r3
 8008e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e9a:	b10a      	cbz	r2, 8008ea0 <_svfiprintf_r+0x60>
 8008e9c:	2a25      	cmp	r2, #37	@ 0x25
 8008e9e:	d1f9      	bne.n	8008e94 <_svfiprintf_r+0x54>
 8008ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ea4:	d00b      	beq.n	8008ebe <_svfiprintf_r+0x7e>
 8008ea6:	465b      	mov	r3, fp
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ff6b 	bl	8008d88 <__ssputs_r>
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f000 80a7 	beq.w	8009006 <_svfiprintf_r+0x1c6>
 8008eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eba:	445a      	add	r2, fp
 8008ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 809f 	beq.w	8009006 <_svfiprintf_r+0x1c6>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed2:	f10a 0a01 	add.w	sl, sl, #1
 8008ed6:	9304      	str	r3, [sp, #16]
 8008ed8:	9307      	str	r3, [sp, #28]
 8008eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ee0:	4654      	mov	r4, sl
 8008ee2:	2205      	movs	r2, #5
 8008ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee8:	484e      	ldr	r0, [pc, #312]	@ (8009024 <_svfiprintf_r+0x1e4>)
 8008eea:	f7f7 f991 	bl	8000210 <memchr>
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	b9d8      	cbnz	r0, 8008f2a <_svfiprintf_r+0xea>
 8008ef2:	06d0      	lsls	r0, r2, #27
 8008ef4:	bf44      	itt	mi
 8008ef6:	2320      	movmi	r3, #32
 8008ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008efc:	0711      	lsls	r1, r2, #28
 8008efe:	bf44      	itt	mi
 8008f00:	232b      	movmi	r3, #43	@ 0x2b
 8008f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f06:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f0c:	d015      	beq.n	8008f3a <_svfiprintf_r+0xfa>
 8008f0e:	9a07      	ldr	r2, [sp, #28]
 8008f10:	4654      	mov	r4, sl
 8008f12:	2000      	movs	r0, #0
 8008f14:	f04f 0c0a 	mov.w	ip, #10
 8008f18:	4621      	mov	r1, r4
 8008f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f1e:	3b30      	subs	r3, #48	@ 0x30
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d94b      	bls.n	8008fbc <_svfiprintf_r+0x17c>
 8008f24:	b1b0      	cbz	r0, 8008f54 <_svfiprintf_r+0x114>
 8008f26:	9207      	str	r2, [sp, #28]
 8008f28:	e014      	b.n	8008f54 <_svfiprintf_r+0x114>
 8008f2a:	eba0 0308 	sub.w	r3, r0, r8
 8008f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f32:	4313      	orrs	r3, r2
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	46a2      	mov	sl, r4
 8008f38:	e7d2      	b.n	8008ee0 <_svfiprintf_r+0xa0>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	1d19      	adds	r1, r3, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	9103      	str	r1, [sp, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bfbb      	ittet	lt
 8008f46:	425b      	neglt	r3, r3
 8008f48:	f042 0202 	orrlt.w	r2, r2, #2
 8008f4c:	9307      	strge	r3, [sp, #28]
 8008f4e:	9307      	strlt	r3, [sp, #28]
 8008f50:	bfb8      	it	lt
 8008f52:	9204      	strlt	r2, [sp, #16]
 8008f54:	7823      	ldrb	r3, [r4, #0]
 8008f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f58:	d10a      	bne.n	8008f70 <_svfiprintf_r+0x130>
 8008f5a:	7863      	ldrb	r3, [r4, #1]
 8008f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f5e:	d132      	bne.n	8008fc6 <_svfiprintf_r+0x186>
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	1d1a      	adds	r2, r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	9203      	str	r2, [sp, #12]
 8008f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f6c:	3402      	adds	r4, #2
 8008f6e:	9305      	str	r3, [sp, #20]
 8008f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009034 <_svfiprintf_r+0x1f4>
 8008f74:	7821      	ldrb	r1, [r4, #0]
 8008f76:	2203      	movs	r2, #3
 8008f78:	4650      	mov	r0, sl
 8008f7a:	f7f7 f949 	bl	8000210 <memchr>
 8008f7e:	b138      	cbz	r0, 8008f90 <_svfiprintf_r+0x150>
 8008f80:	9b04      	ldr	r3, [sp, #16]
 8008f82:	eba0 000a 	sub.w	r0, r0, sl
 8008f86:	2240      	movs	r2, #64	@ 0x40
 8008f88:	4082      	lsls	r2, r0
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f94:	4824      	ldr	r0, [pc, #144]	@ (8009028 <_svfiprintf_r+0x1e8>)
 8008f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	f7f7 f938 	bl	8000210 <memchr>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d036      	beq.n	8009012 <_svfiprintf_r+0x1d2>
 8008fa4:	4b21      	ldr	r3, [pc, #132]	@ (800902c <_svfiprintf_r+0x1ec>)
 8008fa6:	bb1b      	cbnz	r3, 8008ff0 <_svfiprintf_r+0x1b0>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	3307      	adds	r3, #7
 8008fac:	f023 0307 	bic.w	r3, r3, #7
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	9303      	str	r3, [sp, #12]
 8008fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb6:	4433      	add	r3, r6
 8008fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fba:	e76a      	b.n	8008e92 <_svfiprintf_r+0x52>
 8008fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7a8      	b.n	8008f18 <_svfiprintf_r+0xd8>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	3401      	adds	r4, #1
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f04f 0c0a 	mov.w	ip, #10
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd8:	3a30      	subs	r2, #48	@ 0x30
 8008fda:	2a09      	cmp	r2, #9
 8008fdc:	d903      	bls.n	8008fe6 <_svfiprintf_r+0x1a6>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c6      	beq.n	8008f70 <_svfiprintf_r+0x130>
 8008fe2:	9105      	str	r1, [sp, #20]
 8008fe4:	e7c4      	b.n	8008f70 <_svfiprintf_r+0x130>
 8008fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fea:	4604      	mov	r4, r0
 8008fec:	2301      	movs	r3, #1
 8008fee:	e7f0      	b.n	8008fd2 <_svfiprintf_r+0x192>
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8009030 <_svfiprintf_r+0x1f0>)
 8008ff8:	a904      	add	r1, sp, #16
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	f3af 8000 	nop.w
 8009000:	1c42      	adds	r2, r0, #1
 8009002:	4606      	mov	r6, r0
 8009004:	d1d6      	bne.n	8008fb4 <_svfiprintf_r+0x174>
 8009006:	89ab      	ldrh	r3, [r5, #12]
 8009008:	065b      	lsls	r3, r3, #25
 800900a:	f53f af2d 	bmi.w	8008e68 <_svfiprintf_r+0x28>
 800900e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009010:	e72c      	b.n	8008e6c <_svfiprintf_r+0x2c>
 8009012:	ab03      	add	r3, sp, #12
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	462a      	mov	r2, r5
 8009018:	4b05      	ldr	r3, [pc, #20]	@ (8009030 <_svfiprintf_r+0x1f0>)
 800901a:	a904      	add	r1, sp, #16
 800901c:	4638      	mov	r0, r7
 800901e:	f000 f879 	bl	8009114 <_printf_i>
 8009022:	e7ed      	b.n	8009000 <_svfiprintf_r+0x1c0>
 8009024:	080095f5 	.word	0x080095f5
 8009028:	080095ff 	.word	0x080095ff
 800902c:	00000000 	.word	0x00000000
 8009030:	08008d89 	.word	0x08008d89
 8009034:	080095fb 	.word	0x080095fb

08009038 <_printf_common>:
 8009038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	4616      	mov	r6, r2
 800903e:	4698      	mov	r8, r3
 8009040:	688a      	ldr	r2, [r1, #8]
 8009042:	690b      	ldr	r3, [r1, #16]
 8009044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009048:	4293      	cmp	r3, r2
 800904a:	bfb8      	it	lt
 800904c:	4613      	movlt	r3, r2
 800904e:	6033      	str	r3, [r6, #0]
 8009050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009054:	4607      	mov	r7, r0
 8009056:	460c      	mov	r4, r1
 8009058:	b10a      	cbz	r2, 800905e <_printf_common+0x26>
 800905a:	3301      	adds	r3, #1
 800905c:	6033      	str	r3, [r6, #0]
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	0699      	lsls	r1, r3, #26
 8009062:	bf42      	ittt	mi
 8009064:	6833      	ldrmi	r3, [r6, #0]
 8009066:	3302      	addmi	r3, #2
 8009068:	6033      	strmi	r3, [r6, #0]
 800906a:	6825      	ldr	r5, [r4, #0]
 800906c:	f015 0506 	ands.w	r5, r5, #6
 8009070:	d106      	bne.n	8009080 <_printf_common+0x48>
 8009072:	f104 0a19 	add.w	sl, r4, #25
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	6832      	ldr	r2, [r6, #0]
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	42ab      	cmp	r3, r5
 800907e:	dc26      	bgt.n	80090ce <_printf_common+0x96>
 8009080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009084:	6822      	ldr	r2, [r4, #0]
 8009086:	3b00      	subs	r3, #0
 8009088:	bf18      	it	ne
 800908a:	2301      	movne	r3, #1
 800908c:	0692      	lsls	r2, r2, #26
 800908e:	d42b      	bmi.n	80090e8 <_printf_common+0xb0>
 8009090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009094:	4641      	mov	r1, r8
 8009096:	4638      	mov	r0, r7
 8009098:	47c8      	blx	r9
 800909a:	3001      	adds	r0, #1
 800909c:	d01e      	beq.n	80090dc <_printf_common+0xa4>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	6922      	ldr	r2, [r4, #16]
 80090a2:	f003 0306 	and.w	r3, r3, #6
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	bf02      	ittt	eq
 80090aa:	68e5      	ldreq	r5, [r4, #12]
 80090ac:	6833      	ldreq	r3, [r6, #0]
 80090ae:	1aed      	subeq	r5, r5, r3
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	bf0c      	ite	eq
 80090b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090b8:	2500      	movne	r5, #0
 80090ba:	4293      	cmp	r3, r2
 80090bc:	bfc4      	itt	gt
 80090be:	1a9b      	subgt	r3, r3, r2
 80090c0:	18ed      	addgt	r5, r5, r3
 80090c2:	2600      	movs	r6, #0
 80090c4:	341a      	adds	r4, #26
 80090c6:	42b5      	cmp	r5, r6
 80090c8:	d11a      	bne.n	8009100 <_printf_common+0xc8>
 80090ca:	2000      	movs	r0, #0
 80090cc:	e008      	b.n	80090e0 <_printf_common+0xa8>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4652      	mov	r2, sl
 80090d2:	4641      	mov	r1, r8
 80090d4:	4638      	mov	r0, r7
 80090d6:	47c8      	blx	r9
 80090d8:	3001      	adds	r0, #1
 80090da:	d103      	bne.n	80090e4 <_printf_common+0xac>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	3501      	adds	r5, #1
 80090e6:	e7c6      	b.n	8009076 <_printf_common+0x3e>
 80090e8:	18e1      	adds	r1, r4, r3
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	2030      	movs	r0, #48	@ 0x30
 80090ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090f2:	4422      	add	r2, r4
 80090f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090fc:	3302      	adds	r3, #2
 80090fe:	e7c7      	b.n	8009090 <_printf_common+0x58>
 8009100:	2301      	movs	r3, #1
 8009102:	4622      	mov	r2, r4
 8009104:	4641      	mov	r1, r8
 8009106:	4638      	mov	r0, r7
 8009108:	47c8      	blx	r9
 800910a:	3001      	adds	r0, #1
 800910c:	d0e6      	beq.n	80090dc <_printf_common+0xa4>
 800910e:	3601      	adds	r6, #1
 8009110:	e7d9      	b.n	80090c6 <_printf_common+0x8e>
	...

08009114 <_printf_i>:
 8009114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	7e0f      	ldrb	r7, [r1, #24]
 800911a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800911c:	2f78      	cmp	r7, #120	@ 0x78
 800911e:	4691      	mov	r9, r2
 8009120:	4680      	mov	r8, r0
 8009122:	460c      	mov	r4, r1
 8009124:	469a      	mov	sl, r3
 8009126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800912a:	d807      	bhi.n	800913c <_printf_i+0x28>
 800912c:	2f62      	cmp	r7, #98	@ 0x62
 800912e:	d80a      	bhi.n	8009146 <_printf_i+0x32>
 8009130:	2f00      	cmp	r7, #0
 8009132:	f000 80d2 	beq.w	80092da <_printf_i+0x1c6>
 8009136:	2f58      	cmp	r7, #88	@ 0x58
 8009138:	f000 80b9 	beq.w	80092ae <_printf_i+0x19a>
 800913c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009144:	e03a      	b.n	80091bc <_printf_i+0xa8>
 8009146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800914a:	2b15      	cmp	r3, #21
 800914c:	d8f6      	bhi.n	800913c <_printf_i+0x28>
 800914e:	a101      	add	r1, pc, #4	@ (adr r1, 8009154 <_printf_i+0x40>)
 8009150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009154:	080091ad 	.word	0x080091ad
 8009158:	080091c1 	.word	0x080091c1
 800915c:	0800913d 	.word	0x0800913d
 8009160:	0800913d 	.word	0x0800913d
 8009164:	0800913d 	.word	0x0800913d
 8009168:	0800913d 	.word	0x0800913d
 800916c:	080091c1 	.word	0x080091c1
 8009170:	0800913d 	.word	0x0800913d
 8009174:	0800913d 	.word	0x0800913d
 8009178:	0800913d 	.word	0x0800913d
 800917c:	0800913d 	.word	0x0800913d
 8009180:	080092c1 	.word	0x080092c1
 8009184:	080091eb 	.word	0x080091eb
 8009188:	0800927b 	.word	0x0800927b
 800918c:	0800913d 	.word	0x0800913d
 8009190:	0800913d 	.word	0x0800913d
 8009194:	080092e3 	.word	0x080092e3
 8009198:	0800913d 	.word	0x0800913d
 800919c:	080091eb 	.word	0x080091eb
 80091a0:	0800913d 	.word	0x0800913d
 80091a4:	0800913d 	.word	0x0800913d
 80091a8:	08009283 	.word	0x08009283
 80091ac:	6833      	ldr	r3, [r6, #0]
 80091ae:	1d1a      	adds	r2, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6032      	str	r2, [r6, #0]
 80091b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091bc:	2301      	movs	r3, #1
 80091be:	e09d      	b.n	80092fc <_printf_i+0x1e8>
 80091c0:	6833      	ldr	r3, [r6, #0]
 80091c2:	6820      	ldr	r0, [r4, #0]
 80091c4:	1d19      	adds	r1, r3, #4
 80091c6:	6031      	str	r1, [r6, #0]
 80091c8:	0606      	lsls	r6, r0, #24
 80091ca:	d501      	bpl.n	80091d0 <_printf_i+0xbc>
 80091cc:	681d      	ldr	r5, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <_printf_i+0xc4>
 80091d0:	0645      	lsls	r5, r0, #25
 80091d2:	d5fb      	bpl.n	80091cc <_printf_i+0xb8>
 80091d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091d8:	2d00      	cmp	r5, #0
 80091da:	da03      	bge.n	80091e4 <_printf_i+0xd0>
 80091dc:	232d      	movs	r3, #45	@ 0x2d
 80091de:	426d      	negs	r5, r5
 80091e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e4:	4859      	ldr	r0, [pc, #356]	@ (800934c <_printf_i+0x238>)
 80091e6:	230a      	movs	r3, #10
 80091e8:	e011      	b.n	800920e <_printf_i+0xfa>
 80091ea:	6821      	ldr	r1, [r4, #0]
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	0608      	lsls	r0, r1, #24
 80091f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80091f4:	d402      	bmi.n	80091fc <_printf_i+0xe8>
 80091f6:	0649      	lsls	r1, r1, #25
 80091f8:	bf48      	it	mi
 80091fa:	b2ad      	uxthmi	r5, r5
 80091fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80091fe:	4853      	ldr	r0, [pc, #332]	@ (800934c <_printf_i+0x238>)
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	bf14      	ite	ne
 8009204:	230a      	movne	r3, #10
 8009206:	2308      	moveq	r3, #8
 8009208:	2100      	movs	r1, #0
 800920a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800920e:	6866      	ldr	r6, [r4, #4]
 8009210:	60a6      	str	r6, [r4, #8]
 8009212:	2e00      	cmp	r6, #0
 8009214:	bfa2      	ittt	ge
 8009216:	6821      	ldrge	r1, [r4, #0]
 8009218:	f021 0104 	bicge.w	r1, r1, #4
 800921c:	6021      	strge	r1, [r4, #0]
 800921e:	b90d      	cbnz	r5, 8009224 <_printf_i+0x110>
 8009220:	2e00      	cmp	r6, #0
 8009222:	d04b      	beq.n	80092bc <_printf_i+0x1a8>
 8009224:	4616      	mov	r6, r2
 8009226:	fbb5 f1f3 	udiv	r1, r5, r3
 800922a:	fb03 5711 	mls	r7, r3, r1, r5
 800922e:	5dc7      	ldrb	r7, [r0, r7]
 8009230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009234:	462f      	mov	r7, r5
 8009236:	42bb      	cmp	r3, r7
 8009238:	460d      	mov	r5, r1
 800923a:	d9f4      	bls.n	8009226 <_printf_i+0x112>
 800923c:	2b08      	cmp	r3, #8
 800923e:	d10b      	bne.n	8009258 <_printf_i+0x144>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	07df      	lsls	r7, r3, #31
 8009244:	d508      	bpl.n	8009258 <_printf_i+0x144>
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	6861      	ldr	r1, [r4, #4]
 800924a:	4299      	cmp	r1, r3
 800924c:	bfde      	ittt	le
 800924e:	2330      	movle	r3, #48	@ 0x30
 8009250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009258:	1b92      	subs	r2, r2, r6
 800925a:	6122      	str	r2, [r4, #16]
 800925c:	f8cd a000 	str.w	sl, [sp]
 8009260:	464b      	mov	r3, r9
 8009262:	aa03      	add	r2, sp, #12
 8009264:	4621      	mov	r1, r4
 8009266:	4640      	mov	r0, r8
 8009268:	f7ff fee6 	bl	8009038 <_printf_common>
 800926c:	3001      	adds	r0, #1
 800926e:	d14a      	bne.n	8009306 <_printf_i+0x1f2>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	b004      	add	sp, #16
 8009276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	f043 0320 	orr.w	r3, r3, #32
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	4833      	ldr	r0, [pc, #204]	@ (8009350 <_printf_i+0x23c>)
 8009284:	2778      	movs	r7, #120	@ 0x78
 8009286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	6831      	ldr	r1, [r6, #0]
 800928e:	061f      	lsls	r7, r3, #24
 8009290:	f851 5b04 	ldr.w	r5, [r1], #4
 8009294:	d402      	bmi.n	800929c <_printf_i+0x188>
 8009296:	065f      	lsls	r7, r3, #25
 8009298:	bf48      	it	mi
 800929a:	b2ad      	uxthmi	r5, r5
 800929c:	6031      	str	r1, [r6, #0]
 800929e:	07d9      	lsls	r1, r3, #31
 80092a0:	bf44      	itt	mi
 80092a2:	f043 0320 	orrmi.w	r3, r3, #32
 80092a6:	6023      	strmi	r3, [r4, #0]
 80092a8:	b11d      	cbz	r5, 80092b2 <_printf_i+0x19e>
 80092aa:	2310      	movs	r3, #16
 80092ac:	e7ac      	b.n	8009208 <_printf_i+0xf4>
 80092ae:	4827      	ldr	r0, [pc, #156]	@ (800934c <_printf_i+0x238>)
 80092b0:	e7e9      	b.n	8009286 <_printf_i+0x172>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	f023 0320 	bic.w	r3, r3, #32
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	e7f6      	b.n	80092aa <_printf_i+0x196>
 80092bc:	4616      	mov	r6, r2
 80092be:	e7bd      	b.n	800923c <_printf_i+0x128>
 80092c0:	6833      	ldr	r3, [r6, #0]
 80092c2:	6825      	ldr	r5, [r4, #0]
 80092c4:	6961      	ldr	r1, [r4, #20]
 80092c6:	1d18      	adds	r0, r3, #4
 80092c8:	6030      	str	r0, [r6, #0]
 80092ca:	062e      	lsls	r6, r5, #24
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	d501      	bpl.n	80092d4 <_printf_i+0x1c0>
 80092d0:	6019      	str	r1, [r3, #0]
 80092d2:	e002      	b.n	80092da <_printf_i+0x1c6>
 80092d4:	0668      	lsls	r0, r5, #25
 80092d6:	d5fb      	bpl.n	80092d0 <_printf_i+0x1bc>
 80092d8:	8019      	strh	r1, [r3, #0]
 80092da:	2300      	movs	r3, #0
 80092dc:	6123      	str	r3, [r4, #16]
 80092de:	4616      	mov	r6, r2
 80092e0:	e7bc      	b.n	800925c <_printf_i+0x148>
 80092e2:	6833      	ldr	r3, [r6, #0]
 80092e4:	1d1a      	adds	r2, r3, #4
 80092e6:	6032      	str	r2, [r6, #0]
 80092e8:	681e      	ldr	r6, [r3, #0]
 80092ea:	6862      	ldr	r2, [r4, #4]
 80092ec:	2100      	movs	r1, #0
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7f6 ff8e 	bl	8000210 <memchr>
 80092f4:	b108      	cbz	r0, 80092fa <_printf_i+0x1e6>
 80092f6:	1b80      	subs	r0, r0, r6
 80092f8:	6060      	str	r0, [r4, #4]
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	6123      	str	r3, [r4, #16]
 80092fe:	2300      	movs	r3, #0
 8009300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009304:	e7aa      	b.n	800925c <_printf_i+0x148>
 8009306:	6923      	ldr	r3, [r4, #16]
 8009308:	4632      	mov	r2, r6
 800930a:	4649      	mov	r1, r9
 800930c:	4640      	mov	r0, r8
 800930e:	47d0      	blx	sl
 8009310:	3001      	adds	r0, #1
 8009312:	d0ad      	beq.n	8009270 <_printf_i+0x15c>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	079b      	lsls	r3, r3, #30
 8009318:	d413      	bmi.n	8009342 <_printf_i+0x22e>
 800931a:	68e0      	ldr	r0, [r4, #12]
 800931c:	9b03      	ldr	r3, [sp, #12]
 800931e:	4298      	cmp	r0, r3
 8009320:	bfb8      	it	lt
 8009322:	4618      	movlt	r0, r3
 8009324:	e7a6      	b.n	8009274 <_printf_i+0x160>
 8009326:	2301      	movs	r3, #1
 8009328:	4632      	mov	r2, r6
 800932a:	4649      	mov	r1, r9
 800932c:	4640      	mov	r0, r8
 800932e:	47d0      	blx	sl
 8009330:	3001      	adds	r0, #1
 8009332:	d09d      	beq.n	8009270 <_printf_i+0x15c>
 8009334:	3501      	adds	r5, #1
 8009336:	68e3      	ldr	r3, [r4, #12]
 8009338:	9903      	ldr	r1, [sp, #12]
 800933a:	1a5b      	subs	r3, r3, r1
 800933c:	42ab      	cmp	r3, r5
 800933e:	dcf2      	bgt.n	8009326 <_printf_i+0x212>
 8009340:	e7eb      	b.n	800931a <_printf_i+0x206>
 8009342:	2500      	movs	r5, #0
 8009344:	f104 0619 	add.w	r6, r4, #25
 8009348:	e7f5      	b.n	8009336 <_printf_i+0x222>
 800934a:	bf00      	nop
 800934c:	08009606 	.word	0x08009606
 8009350:	08009617 	.word	0x08009617

08009354 <memmove>:
 8009354:	4288      	cmp	r0, r1
 8009356:	b510      	push	{r4, lr}
 8009358:	eb01 0402 	add.w	r4, r1, r2
 800935c:	d902      	bls.n	8009364 <memmove+0x10>
 800935e:	4284      	cmp	r4, r0
 8009360:	4623      	mov	r3, r4
 8009362:	d807      	bhi.n	8009374 <memmove+0x20>
 8009364:	1e43      	subs	r3, r0, #1
 8009366:	42a1      	cmp	r1, r4
 8009368:	d008      	beq.n	800937c <memmove+0x28>
 800936a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800936e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009372:	e7f8      	b.n	8009366 <memmove+0x12>
 8009374:	4402      	add	r2, r0
 8009376:	4601      	mov	r1, r0
 8009378:	428a      	cmp	r2, r1
 800937a:	d100      	bne.n	800937e <memmove+0x2a>
 800937c:	bd10      	pop	{r4, pc}
 800937e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009386:	e7f7      	b.n	8009378 <memmove+0x24>

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	@ (80093a4 <_sbrk_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f9 fcb4 	bl	8002d00 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000d04 	.word	0x20000d04

080093a8 <memcpy>:
 80093a8:	440a      	add	r2, r1
 80093aa:	4291      	cmp	r1, r2
 80093ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b0:	d100      	bne.n	80093b4 <memcpy+0xc>
 80093b2:	4770      	bx	lr
 80093b4:	b510      	push	{r4, lr}
 80093b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093be:	4291      	cmp	r1, r2
 80093c0:	d1f9      	bne.n	80093b6 <memcpy+0xe>
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <_realloc_r>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	4680      	mov	r8, r0
 80093ca:	4615      	mov	r5, r2
 80093cc:	460c      	mov	r4, r1
 80093ce:	b921      	cbnz	r1, 80093da <_realloc_r+0x16>
 80093d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	4611      	mov	r1, r2
 80093d6:	f7ff bc4b 	b.w	8008c70 <_malloc_r>
 80093da:	b92a      	cbnz	r2, 80093e8 <_realloc_r+0x24>
 80093dc:	f7ff fbdc 	bl	8008b98 <_free_r>
 80093e0:	2400      	movs	r4, #0
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	f000 f81a 	bl	8009420 <_malloc_usable_size_r>
 80093ec:	4285      	cmp	r5, r0
 80093ee:	4606      	mov	r6, r0
 80093f0:	d802      	bhi.n	80093f8 <_realloc_r+0x34>
 80093f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093f6:	d8f4      	bhi.n	80093e2 <_realloc_r+0x1e>
 80093f8:	4629      	mov	r1, r5
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff fc38 	bl	8008c70 <_malloc_r>
 8009400:	4607      	mov	r7, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d0ec      	beq.n	80093e0 <_realloc_r+0x1c>
 8009406:	42b5      	cmp	r5, r6
 8009408:	462a      	mov	r2, r5
 800940a:	4621      	mov	r1, r4
 800940c:	bf28      	it	cs
 800940e:	4632      	movcs	r2, r6
 8009410:	f7ff ffca 	bl	80093a8 <memcpy>
 8009414:	4621      	mov	r1, r4
 8009416:	4640      	mov	r0, r8
 8009418:	f7ff fbbe 	bl	8008b98 <_free_r>
 800941c:	463c      	mov	r4, r7
 800941e:	e7e0      	b.n	80093e2 <_realloc_r+0x1e>

08009420 <_malloc_usable_size_r>:
 8009420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009424:	1f18      	subs	r0, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfbc      	itt	lt
 800942a:	580b      	ldrlt	r3, [r1, r0]
 800942c:	18c0      	addlt	r0, r0, r3
 800942e:	4770      	bx	lr

08009430 <_init>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr

0800943c <_fini>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr
